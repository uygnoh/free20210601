/*******************************************************************************
                                 clock_system
*******************************************************************************/
| CLK_CKDIVR //时钟分频寄存器
|________________________________________________________________|
|   -   |   -   |   -   |  HSIDIV[1:0]  |      CPUDIV[2:0]       |
|_______|_______|_______|_______________|________________________|
|  HSIDIV[4:3]                                                   |
|       //高速内部时钟分频器，由软件写入，用于指定HSI分频因子             |
|               00:  fHSIDIV = fHSI / 1                          |
|               01:  fHSIDIV = fHSI / 2                          |
|               10:  fHSIDIV = fHSI / 4                          |
|               11:  fHSIDIV = fHSI / 8                          |
|________________________________________________________________|
|  CPUDIV[2:0]                                                   |
|       //CPU时钟预分频器，由软件写入，用于指定CPU时钟预分频因子          |
|               000: fCPU = fMASTER / 1                          |
|               000: fCPU = fMASTER / 2                          |
|               000: fCPU = fMASTER / 4                          |
|               000: fCPU = fMASTER / 8                          |
|               000: fCPU = fMASTER / 16                         |
|               000: fCPU = fMASTER / 32                         |
|               000: fCPU = fMASTER / 64                         |
|               000: fCPU = fMASTER / 128                        |
|________________________________________________________________|


| CLK_HSITRIMR //时钟修正寄存器
|_______________________________________________________|
|                           |        HSITRIM[3:0]       |
|___________________________|______|______|______|______|
|  HSITRIM[3:0]                                         |
|       //HSI修正值，由软件写入，用于微调 HSI 的校准值        |
|               011     +3                             |
|               010     +2                             |
|               001     +1                             |
|               000     +0                             |
|               111     -1                             |
|               110     -2                             |
|               101     -3                             |
|               100     -4                             |
|_______________________________________________________|



//自动切换时钟源
|______________________________________________________________________
|//1 时钟切换具体过程大多由硬件完成，软件操作只是下达转换和指定时钟               |
|//2 在下达切换和指定切换时钟后，只需等待切换完毕即可                           |
|//3 可按用户需求使能中断机制，中断使能并不是必须的                            |
|//4 切换时机不是绝对可控，具体时间由硬件状态决定                              |
|______________________________________________________________________|
| CLK_SWCR切换控制寄存器 | CLK_SWR主时钟切换寄存器 | CLK_CMSR主时钟状态寄存器  |
|______________________________________________________________________|
[硬件自动]  1  上电复位开始工作                                            |
[硬件自动]  2  初始默认配置为HSI内部时钟源的8分频，即16MHz/8=2MHz主时钟频率     |
[软件操作]  3  配置切换控制CLK_SWCR寄存器SWEN位为“1”，启动切换时钟源           |
[软件操作]  4  按照用户需要可配置CLK_SWCR寄存器SWIEN位为“1”使能中断(可选)       |
[软件操作]  5  将欲设定时钟源值写入主时钟切换CLK_SWR寄存器中                    |
[硬件自动]  6  切换控制CLK_SWCR寄存器的位SWBSY硬件自动置“1”，表示切换状态忙      |
[硬件自动]  7  预设定目标振荡器使能开始启动                                   |
[硬件自动]  8  刚开始启动后经过一段时间趋于稳定，达到就绪状态                    |
[硬件自动]  9  SWBSY硬件自动清“0”，主时钟切换CLK_SWR寄存器中的目标时钟源值       |
              转入主时钟状态CLK_CMSR寄存器，新旧时钟切换完成。                 |
[硬件自动]  10 按照用户需要产生中断，即“SWIF”位硬件自动置“1”，表示有时钟切换       |
              事件发生。（可选）                                           |
[软件操作]  11 程序接收中断，并由程序软件对“SWIF”位清“0”                       |
[硬件自动]  12 单片机工作在新的时钟频率下。                                   |
_______________________________________________________________________|
|
|
| CLK_SWCR //切换控制寄存器
|________________________________________________________
|                         | SWIF | SWIEN | SWEN | SEBSY  |
|_________________________|______|_______|______|________|
|                                                        |
|  SWIF[3]      //在自动切换模式下，代表有没有事件发生          |
|               //在手动切换模式下，代表目标时钟源有没有准备好   |
|  SWIEN[2]     //切换中断使能                             |
|  SWEN[1]      //使能切换                                 |
|  SWBSY[0]     //切换状态忙                                |
|_________________________________________________________|
|
|
| CLK_SWR //主时钟切换寄存器
|_______________________________________________________|
|  1   |  1   |  1   |  0   |  0   |  0   |  0   |  1   |
|______|______|______|______|______|______|______|______|
|  0xE1 //HSI为主时钟源（复位默认值）                       |
|  0xD2 //LSI为主时钟源（仅当“LSI_EN”选项字节位配置为“1”时）   |
|  0xB4 //HSE为主时钟源                                   |
|_______________________________________________________|
|
|
| CLK_CMSR //主时钟状态寄存器(只读)
|_______________________________________________________|
|  1   |  1   |  1   |  0   |  0   |  0   |  0   |  1   |
|______|______|______|______|______|______|______|______|
|  由硬件置“1”或清“0”，用于指示当前所选的主时钟源。            |
|  如果该寄存器中的值为无效值，则产生MCU复位                  |
|  0xE1 //HSI为主时钟源（复位默认值）                       |
|  0xD2 //LSI为主时钟源（仅当“LSI_EN”选项字节位配置为“1”时）   |
|  0xB4 //HSE为主时钟源                                   |
|_______________________________________________________|



// HSI->HSE时钟自动切换流程 //
___________________________________________________________
//如果CLK_CMSR中的主时钟源为HSI, 则CLK_CMSR = 0xE1            |
//如果CLK_CMSR中的主时钟源为LSI, 则CLK_CMSR = 0xD2            |
//如果CLK_CMSR中的主时钟源为HSE, 则CLK_CMSR = 0xB4            |
if (CLK_CMSR != 0xB4) {                                   |
        CLK_SWCR |= 0x02; //使能切换，SWEN=1                |
        CLK_SWR   = 0xB4; //配置CLK_CMSR中的主时钟源为HSE     |
        //等待时钟切换控制寄存器CLK_SWCR中的切换中断标志位SWIF=1  |
        while ((CLK_SWCR & 0x08) == 0);                   |
        CLK_SWCR  = 0x00; //清除相关标志位                   |
}                                                          |
___________________________________________________________|



//手动切换时钟源
_____________________________________________________________________________
//单片机软件操作控制整个切换过程                                                  |
//手动切换不属于“立即”型切换动作，将欲设定时钟源值写入主时钟切换                        |
//CLK_SWR寄存器后并不急于切换，而是等待目标时钟稳定。                                |
//整个流程里使能中断将会简化控制，还需编写中断服务函数                                |
//切换时机由用户程序控制，具体时间由硬件状态去决定                                   |
在手动切换时钟源过程中，切换过程若遇到某种原因导致切换失败的时候                        |
可以通过程序对切换忙标志位“SWBSY”进行清“0”操作以复位当前的切换                        |
过程，复位过程后主时钟切换寄存器（CK_SWR）的配置会重新恢复到原时钟源。                   |
_____________________________________________________________________________|
【硬件自动】  1 上电复位开始工作                                                  |
【硬件自动】  2 初始默认配置为HSI内部时钟源，即2MHz主时钟频率                         |
【软件操作】  3 按照用户需要可配置CLK_SWCR寄存SWIEN位为“1”使能中断                   |
【软件操作】  4 将欲设定时钟源值写入主时钟切换CLK_SWR寄存器中                         |
【硬件自动】  5 切换控制CLK_SWCR寄存器的位SWBSY硬件自动置“1”，表示切换状态忙           |
【硬件自动】  6 预设定目标振荡器使能开始启动                                        |
【硬件自动】  7 刚开始启动后经过一段时间趋于稳定，达到就绪状态                         |
【硬件自动】  8 按照用户需要产生中断，即SWIF位硬件自动置“1”，表示目标时钟源准备就绪       |
【软件操作】  9 程序接收中断，并由程序软件对SWIF位清“0”                              |
【软件操作】 10 用户自行决定执行切换时间点，配置切换控制CLK_SWCR寄存器SWEN位为“1”，     |
              启动切换时钟源                                                   |
【硬件自动】 11 SWBSY硬件自动清“0”，主时钟切换CLK_SER寄存器中的目标时钟源值转入主时钟   |
              状态CLK_CMSR寄存器，新旧时钟切换完成                               |
【硬件自动】 12  单片机工作在新的时钟频率下                                        |
____________________________________________________________________________|
|
|
| CLK_ICKR //内部时钟寄存器
|_______________________________________________________|
| - | - | REGAH | LSIRDY | LSIEN | FHW | HSIRDY | HSIEN |
|_______|_______|________|_______|_____|________|_______|
|
|
| CLK_ECKR //内部时钟寄存器
|_______________________________________________________|
| - | - |   -   |   -    |   -   |  -  | HSERDY | HSEEN |
|_______|_______|________|_______|_____|________|_______|


//HSI -> HSE 手动切换时钟程序
_______________________________________________________________
//首先开启时钟切换中断使能，也就是时钟切换寄存器CLK_SWCR中的SWIEN=1
CLK_SWCR |= 0x04;
//选择主时钟源，对主时钟切换寄存器CLK_SWR写入欲切换时钟
CLK_SWR   = 0xB4;
//开启全局中断
asm("rim");

//中断服务程序, 时钟源切换
#pargma vector=4
__interrupt void CLK_IRQHandler(void)
{
        CLK_SWCR &= 0xF7; //清除SWIF中断标志位
        CLK_SWCR |= 0x02; //对SWEN位置“1”，启动切换
}
_______________________________________________________________



| //“小而强”的时钟LSI(110KHz~146KHz)
|_____________________________________________________________|
| LSI时钟源是一个低成休，低功耗的时钟源，可以在停机（Halt）            |
| 模式下作为独立看门狗（IWDG）和自动唤醒单元（AWU）运行所需的时钟源     |
|                                                             |
| //如果需要启用LSI时钟源作为系统的主时钟源                         |
| 1 配置STM8单片机选项字节“LSI_EN”位为“1”                        |
| 2 后面的时钟源切换以前面的时钟源切换相似                          |
|                                                              |
|______________________________________________________________|
|                                                              |
|                                                              |
|                     // STM8S clock system //                 |
|______________________________________________________________|
|                                                              |
|               HSE             HSI             LSI            |
|                |               |               |             |
|                |               |               |             |
|                |        |______v______|        |             |
|                |        | HSIDIV[1:0] |        |             |
|                |        |______|______|        |             |
|                |               |               |             |
|                |               |               |             |
|                |        |______v______|        |             |
|                |        |   fHSIDIV   |        |             |
|                |        |______|______|        |             |
|                |               |               |             |
|                |               |               |             |
|             |__v_______________v_______________v__|          |
|             |                                     |          |
|             |               fMASTER               |          |
|             |__|_______________|_______________|__|          |
|                |               |               |             |
|                |               |               |             |
|           AWU<-|       |_______v_______|       |->SPI        |  
|           ADC<-|       |  CPUDIV[2:0]  |       |->I2C        |
|         USART<-|       |_______|_______|       |->TIM        |
|                                |                             |
|                                |                             |
|                            |___v___|                         |
|                            | fcpu  |                         |
|                            |___|___|                         |
|                                |                             |
|                                |                             |
|                        |_______v_______|                     |   
|                        |   CPU |  WWDG |                     |
|                        |_______|_______|                     |
|______________________________________________________________|











/*******************************************************************************
                                optino_byte
*******************************************************************************/
ICP     //基于电路的更新方式(STLINKV2 + SWIM)，外科手术
IAP     //在单片机内部写一个程序，修改这些选项字节，内科手术

_______________________________________________________________________________|
//用户自定义数据区域-IAP方式修改选项字节
uint8_t opt_bytes[9] = {0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55};
void opt_config(void)
{
        //输入MASS密匙用于解锁 DATA_EEPROM 的写保护
        do { 
                FLASH_DUKR = 0xAE;        //硬件密匙1
                FLASH_DUKR = 0x56;        //硬件密匙2
        } while (!(FLASH_IAPSR & 0x80));  //等待解锁Flash完成
        FLASH_CR2  = 0x80;  //选项字节进行写操作被使能
        FLASH_NCR2 = 0x7F;  //互补控制寄存器FLASH_NCR2中的NOPT位要为“0”
        *((uint8_t *)0x4800)    = opt_bytes[0]; //配置ROP选项
        *((uint8_t *)0x4801)    = opt_bytes[1]; //配置UBC选项
        *((uint8_t *)0x4802)    = ~opt_bytes[2];//配置UBC选项的互补字节
        *((uint8_t *)0x4803)    = opt_bytes[3]; //配置AFR选项
        *((uint8_t *)0x4804)    = ~opt_bytes[4];//配置AFR选项的互补字节
        *((uint8_t *)0x4805)    = opt_bytes[5]; //配置看门狗选项
        *((uint8_t *)0x4806)    = ~opt_bytes[6];//配置看门狗选项的互补字节
        *((uint8_t *)0x4807)    = opt_bytes[7]; //时钟选项
        *((uint8_t *)0x4808)    = ~opt_bytes[8];//时钟选项的互补字节
}
_______________________________________________________________________________|
///选项字节地址 |     选项名称            |     选项序号       |
______________|________________________|__________________|
|   0x4800    | 读出保护(ROP)           |       OPT0        |
|   0x4801    | 用户代码启动区(UBC)      |       OPT1        |
|   0x4802    |                        |      NOPT1        |
|   0x4803    | 引脚利用功能配置(AFR)     |       OPT2        |
|   0x4804    |                       |       NOPT2        |
|   0x4805    | 看门狗选项              |        OPT3        |
|   0x4806    |                       |       NOPT3        |
|   0x4807    | 时钟选项               |         OPT4       |
|   0x4808    |                       |       NOPT4        |
|   0x4809    | 石英晶体振荡器稳定时间    |        OPT5        |
|   0x480A    |                       |       NOPT5        |
|   0x480B    | 保留                   |        OPT6        |
|   0x480C    |                       |       NOPT6         |
|   0x480D    | 等待状态配置            |        OPT7         |
|   0x480E    |                      |        NOPT7         |
|   0x487E    | 启动引导选项字节        |         OPTBL        |
|   0x487F    |                      |        NOPTBL        |
|_____________|______________________|______________________|___________
|                                                                      |
|                                                                      |
|  //ROP保护选项(Read Out Protection)是读出保护                            |
|  设定为0xAA(10101010), 读出保护生效。解除保护后单片机内部程序存储区            |
|  用户启动代码区UBC，  DATA区和Option bytes中的参数和数据都会被擦除，            |
|  相当于单片机启动“自毁程序”，芯片内部被还原到出厂默认设置。复位值(0x00)            |
|________________________________________________________________________|
|  //UBC用户代码启动区                                                      |
|  用来调整用户启动代码区域的有无与大小，用户代码启动区域“User Boot Code”          |
|  包含有复位和中断向量表，它可用于存储IAP及通讯程序。                            |
|  UBC[7:0] = 0x00      //不存在UBC区域                                    |
|  UBC[7:0] = 0x01      //1个页大小                                        |
|_________________________________________________________________________|
|                                                                         |
|  //AFR引脚利用功能                                                        |
|  AFR重映射选项的第 7 位， 该位为“0”，则PD4备选功能为定时/计数器2的通道1(TIM2_CH1)|
|  AFR重映射选项的第 7 位， 该位为“1”，则PD4备选功能为蜂鸣器“BEEP”输出引脚         |
|  BEEP资源--->蜂鸣器的外部激励信号                                           |
|                                                                         |
|                                                                         |
|  AFR重映射选项的第 6 位， 该位为“0”                                         |
|       端口PB5备选功能为模拟信号输入通道5“AIN5”                               |
|       端口PB4备选功能为模拟信号输入通道4“AIN4”                              |
|  AFR重映射选项的第 6 位， 该位为“1”                                        |
|       端口PB5备选功能为I2C通信的串行数据引脚“I2C_SDA”                       |
|       端口PB4备选功能为I2C通信的串行时钟引脚“I2C_SCL”                       |
|                                                                       |
|  AFR重映射选项的第 5 位， 该位为“0”                                        |
|       端口PB3备选功能为模拟信号输入通道3“AIN3”                              |
|       端口PB2备选功能为模拟信号输入通道2“AIN2”                              |
|       端口PB1备选功能为模拟信号输入通道1“AIN1”                              |
|       端口PB0备选功能为模拟信号输入通道0“AIN0”                              |
|  AFR重映射选项的第 5 位， 该位为“1”                                         |
|       端口PB3备选功能为定时/计数器1的ETR功能引脚“TIM1_ETR”                    |
|       端口PB2备选功能为定时/计数器1的互补通道3“TIM1_CH3N”                     |
|       端口PB1备选功能为定时/计数器1的互补通道2“TIM1_CH2N”                     |
|       端口PB0备选功能为定时/计数器1的互补通道1“TIM1_CH1N”                     |
|                                                                         |
|  AFR重映射选项的第 4 位， 该位为“0”                                         |
|       端口PD7备选功能为最高等级的外部中断引脚“TLI”                            |
|  AFR重映射选项的第 4 位， 该位为“1”                                         |
|       端口PD7备选功能为定时/计数器1的通道4“TIM1_CH4”                         |
|                                                                         |
|  AFR重映射选项的第 3 位， 该位为“0”                                         |
|       端口PD0备选功能为定时/计数器3的通道2“TIM3_CH2”                         |
|  AFR重映射选项的第 3 位， 该位为“1”                                         |
|       端口PD0备选功能为定时/计数器1的刹车输入引脚“TIM1_BKIN”                   |
|                                                                         |
|  AFR重映射选项的第 2 位， 该位为“0”                                         |
|       端口PD0备选功能为定时/计数器3的通道2“TIM3_CH2”                         |
|  AFR重映射选项的第 2 位， 该位为“1”                                         |
|       端口PD0备选功能为系统时钟输出引脚“CLK_CCO”                             |
|                                                                        |
|  AFR重映射选项的第 1 位， 该位为“0”                                         |
|       端口PA3备选功能为定时/计数器2的通道3“TIM2_CH3”                         |
|       端口PD2备选功能为定时/计数器3的通道1“TIM3_CH1”                         |
|  AFR重映射选项的第 1 位， 该位为“1”                                         |
|       端口PA3备选功能为定时/计数器3的通道1“TIM3_CH1”                         |
|       端口PD2备选功能为定时/计数器2的通道3“TIM2_CH3”                         |
|                                                                        |
|  AFR重映射选项的第 0 位， 该位为“0”                                         |
|       端口PD3备选功能为定时/计数器2的通道2“TIM2_CH2”                         |
|  AFR重映射选项的第 0 位， 该位为“1”                                         |
|       端口PD3备选功能为模拟数字转换ADC单元的专用外部触发引脚“ADC_ETR”           |
|________________________________________________________________________|
|                                                                        |
|  //看门狗选项字节(复位值: 0x00)                                           |
|  看门狗选项可以对STM8单片机内部低速时钟“LSI”进行使能，激活独立看门狗，            |
|  激活窗口看门狗和配置芯片进入暂停模式时窗口看门狗的复位动作。                     |
|  //LSI_EN[3] 位作用为                                                    |
|       LSI_EN    = 0, 内部低速128KHz频率不能作为CPU时钟源                    |
|       LSI_EN    = 1, 内部低速128KHz频率可以作为CPU时钟源                    |
|  //IWDG_HW[2] 位作用为独立看门狗激活方式                                    |
|       IWDG_HW   = 0, 则独立看门狗由软件激活                                 |
|       IWDG_HW   = 1, 则独立看门狗由硬件激活                                 |
|  //WWDG_HW[1] 位作用为窗口看门狗激活方式                                     |
|       IWDG_HW   = 0, 则窗口看门狗由软件激活                                 |
|       IWDG_HW   = 1, 则窗口看门狗由硬件激活                                 |
|  //WWDG_HALT[0] 位作用为配置芯片进入暂停模式时窗口看门狗的复位动作               |
|       WWDG_HALT = 0, 如果窗口看门狗使能，则当芯片进入暂停模式时不产生复位        |
|       WWDG_HALT = 1; 如果窗口看门狗使能，则当芯片进入暂停模式时可以产生复位       |
|__________________________________________________________________________|
|  //时钟选项(复位值: 0x00)                                                  |
|  时钟选项可以对STM8单片机的外部时钟选择，自动唤醒单元/时钟，自动唤醒单元的           |
|  时钟分进行配置。                                                           |
|  //EXT_CLK[3] 位作为外部时钟选择位                                          |
|       EXT_CLK   = 0, 则外部晶体振荡器连接到OSCIN/OSCOUT引脚上                |
|       EXT_CLK   = 1, 则外部时钟信号连接到OSCIN引脚上                         |
|  //CKAWUSEL[2] 位作用是自动唤醒单元/时钟选择位                                |
|       CKAWUSEL  = 0, 则128KHz频率的LSI的低频时钟源作为自动唤醒单元的时钟        |
|       CKAWUSEL  = 1, 则外部晶体振荡器时钟源HSE分频后的时钟作为自动唤醒单元的时钟  |
|  //PRSC[1:0]                                                            |
|       PRSC[1:0] = 00, 则配置为24MHz到128KHz到                             |
|       PRSC[1:0] = 01, 则配置为16MHz到128KHz到                             |
|       PRSC[1:0] = 10, 则配置为 8MHz到128KHz到                             |
|       PRSC[1:0] = 11, 则配置为 4MHz到128KHz到                             |
|_________________________________________________________________________|
|  //石英晶体振荡器稳定时间选项(复位值: 0x00)                                  |
|  可以对STM8单片机外部晶体振荡器时钟源（HSE）的稳定时间进行配置。在时钟稳定时间      |
|  选项中有8个位，即HSECNT[7:0]，通过对其进行赋值可以配置不同的外部晶体振荡器时      |
|  钟源（HSE）的稳定时间                                                     |
|       若配置为“0x00”， 则配置为2048个HSE周期                                |
|       若配置为“0xB4”， 则配置为 128个HSE周期                                |
|       若配置为“0xD2”， 则配置为   8个HSE周期                                |
|       若配置为“0xE1”， 则配置为 0.5个HSE周期                                |
|_________________________________________________________________________|
|                                                                         |
|  //等待状态含义及作用(复位值: 0x00)                                         |
|  //WAITSTATE[0]                                                        |
|  WAITSTATE作为等待状态配置位，这个选项用于设置FLASH或EEPROM存储器中读取数据时插入 |
|  的等待周期。当 “fCPU > 16MHz” 时需要一个等待周期， 该位为“0”则无等待周期，该位  |
|  为“1”时则等待周期为“1”。需要注意的是若在实际的单片机开系统开发中使用的晶体振荡器   |
|  超过了16MHz，则应配置该选项位为“1”，否则单片机无法正常工作。                   |
|________________________________________________________________________|
|                                                                        |
|  //启动引导选项(复位值: 0x00)                                             |
|  启动引导选项可以决定STM8单片机启动引导区（BOOT ROM）是否启动                  |
|  该选项中的BL[7:0]是系统启动引导选项字节，复位后启动引导区（BOOT ROM）          |
|  看的程序会检查这个选项，同时根据复位向量中的内容决定CPU跑到引导程序还是           |
|  复位向量运行                                                            |
|                                                                        |
|  //使用串口下载程序: BL[7:0] = 0x55;                                      |
|________________________________________________________________________|











/*******************************************************************************
                                  gpio
*******************************************************************************/
| Px_DDR  //端口数据方向寄存器(x = A, B, C, D, E, F, G, H, I)
|_______________________________________________________|
| DDR7 | DDR6 | DDR5 | DDR4 | DDR3 | DDR2 | DDR1 | DDR0 |
|______|______|______|______|______|______|______|______|
|  0    Input                                           |
|  1    Output                                          |
|_______________________________________________________|


| Px_CR1  //端口控制寄存器1
|_______________________________________________________|
|  C17 |  C16 | C15  |  C14 |  C13 |  C12 |  C11 |  C10 |
|______|______|______|______|______|______|______|______|
| 输入模式(DDR=0)                                        |
|  0    //浮空输入                                       |
|  1    //带上拉电阻输入                                  |
|_______________________________________________________|
| 输出模式(DDR=1)                                        |
|  0    //模拟开漏输出（不是真正的开漏输出）                 |
|  1    //推挽输出（由CR2相应的位做输出摆率控制）             |
|_______________________________________________________|


| Px_CR2  //端口控制寄存器2
|_______________________________________________________|
|  C27 |  C26 | C25  |  C24 |  C23 |  C22 |  C21 |  C20 |
|______|______|______|______|______|______|______|______|
| 输入模式(DDR=0)                                        |
|  0    //禁止外部中断                                    |
|  1    //使能外部中断                                    |
|_______________________________________________________|
| 输出模式(DDR=1)                                        |
|  0    //输出最大速度为2MHz                              |
|  1    //输出最大速度为10MHz                             |
|_______________________________________________________|


| Px_ODR  //端口输出数据寄存器
|_______________________________________________________|
| ODR7 | ODR6 | ODR5 | ODR4 | ODR3 | ODR2 | ODR1 | ODR0 |
|______|______|______|______|______|______|______|______|
| 输出模式，写入寄存器的数值通过锁存器加到相应的引脚上           |
| 输入模式，写入ODR的值将被锁存到寄存器中，但不会改变引脚状态     |
|_______________________________________________________|


| Px_IDR  //端口输入数据寄存器(只读寄存器)
|_______________________________________________________|
| IDR7 | IDR6 | IDR5 | IDR4 | IDR3 | IDR2 | IDR1 | IDR0 |
|______|______|______|______|______|______|______|______|
| 不论引脚是输入还是输出模式，都可以通过该寄存器读入引脚状态值    |
| 该引脚为只读寄存器（0 表示逻辑低电平， 1 表示逻辑高电平 ）    |
|_______________________________________________________|


//设置PE端口
PE_DDR_DDR0 = 1;        //第0位为输出模式
PE_CR1_C10  = 0;        //第0位为推挽输出
PE_ODR_ODR0 = 1;        //第0位为“逻辑1”



/*******************************************************************************
                                 interrupt
*******************************************************************************/
|——————————————————————————————————————————————————————————|
|       RESET   //单片机复位(8000H)不可屏蔽                   |
|       TRAP    //软件中断(8004H)不可屏蔽                    |
| 0     TLI     //外部最高级中断(8008)不可屏蔽                |
| 1     AWU     //自动唤醒停机模式中断(800C)                 |
| 2     CLK     //时钟控制器                               |
——————————————————————————————————————————————————————————|
int main(void)
{
        RIM     //执行RIM指令，将它软件优先级降为0级，间接地开启了中断
}






| CCR //CPU-CCR寄存器中断位
|_______________________________________________________|
|  V   |  -   |  I1  |   H  |  I0  |   N  |   Z  |   C  |
|______|______|______|______|______|______|______|______|____
| 溢出标志位“V”， 负数标志位“N”, 零标志位“Z”                     |
| 半进位标志位“H”， 进位标志位“C”                                |
|____________________________________________________________|
| I[5 3]                                                     |
|       //软件中断优先级位                                      |
|       //这2位表明当前中断请求的优先级。当一个中断请求发生时，相应    |
|       //的中断向量的软件优先级自动从(ITC_SPRx)载入I[1:0]         |
|       //I[1:0]可以通过 RIM, SIM, HALT, WFI, IRET 或者         |
|       //PUSH/POP等指令来软件置位和清零                          |
|_____________________________________________________________|
|               I1   I0       优先级                  级别      |
|               1     0       级别0(主程序)            最低      |
|               0     1       级别1                   次低      |
|               0     0       级别2                   次高      |
|               1     1       级别3                   最高      |
|______________________________________________________________|__|
|                                                                 |
|                                                                 |________|
| ITC_SPRx                                                                 |
| //软件优先级寄存器,复位值（0xFF）, 写入对应值，它会自动配置到CCR寄存器的I[1:0]中    |
|          |    7  |    6  |    5  |    4  |    3   |   2  |   1   |    0  |
|__________|_______|_______|_______|_______|________|______|_______|_______|
| ITC_SPR1 | VECT3SPR[1:0] | VECT2SPR[1:0] | VECT1SRP[1:0] | VECT0SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR2 | VECT7SPR[1:0] | VECT6SPR[1:0] | VECT5SRP[1:0] | VECT4SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR3 |VECT11SPR[1:0] |VECT10SPR[1:0] | VECT9SRP[1:0] | VECT8SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR4 |VECT15SPR[1:0] |VECT14SPR[1:0] |VECT13SRP[1:0] |VECT12SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR5 |VECT19SPR[1:0] |VECT218PR[1:0] |VECT17SRP[1:0] |VECT16SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR6 |VECT23SPR[1:0] |VECT22SPR[1:0] |VECT21SRP[1:0] |VECT20SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR7 |VECT27SPR[1:0] |VECT26SPR[1:0] |VECT25SRP[1:0] |VECT24SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
| ITC_SPR8 |                               |VECT29SRP[1:0] |VECT28SPR[1:0] |
|__________|_______________|_______________|_______________|_______________|
|                                                         |
|                                                         | 
//STM8S为外部中断专门分配了五个中断向量                         |
|_________________________________________________________|
|       Port A 端口的5个引脚: PA[6:2]                       |
|       Port B 端口的8个引脚: PB[7:0]                       |
|       Port C 端口的8个引脚: PC[7:0]                       |
|       Port D 端口的7个引脚: PD[6:0]                       |
|       Port E 端口的8个引脚: PE[7:0]                       |
|_________________________________________________________|___________________|
|                                                                             |
//STM8S产生外部中断条件                                                          |
|______________________________________________________________________________|
| 1) 相应的GPIO端口必须通过端口数据寄存器(Px_DDR), 端口控制寄存器1(Px_CR1)             |
|    端口控制寄存器2(Px_CR2)配置为带中断功能的上拉输入接口。                           |
| 2) 中断的触发方式由外部中断控制寄存器1(EXTI_CR1)和外部中断控制寄存器2(EXTI_CR2)所配置  |
| 3) 中断软件优先级寄存器(ITC_SPRX)配置                                           |
| 4) 外部中断服务子程序入口函数                                                    |
| 5) 开启和关闭总中断                                                            |
|    汇编指令asm("sim") 禁止总中断(3级中断优先设置)                                 |                                                    |
|    汇编指令asm("rim") 使能总中断(0级中断优先设置)                                 |
|                                                                             |
|______________________________________________________________________________|
asm("sim");             //main程序的优先级配置为3级(关总中断)
EXTI_CR1 = 0xE4;        //配置PA为下降沿和低电平触发，PB为上升沿触发
                        //PC为仅下降沿触发， PD为上升沿和下降沿触发
ITC_SPR2 = 0x73;        //0111 0011 
                        //VECT5SPR[1:0]=00, VECT7SPR[1:0]=01
PA_DDR_DDR5 = 0;        //配置 PA5 端口为输入模式
PA_CR1_C15  = 1;        //配置 PA5 端口为弱上拉输入模式
PA_CR1_C25  = 1;        //配置 PA5 端口为外部中断功能
asm("rim");             //main程序的优先级由3级降低至0级(开总中断)
______________________________________________________________________________




| EXTI_CR1  //外部中断控制寄存器1
|_______________________________________________________|
|  PDIS[1:0]  |  PCIS[1:0]  |  PBIS[1:0]  |  PAIS[1:0]  |
|______|______|______|______|______|______|______|______|_
|  PDIS[7:6]                                              |
|       //PORT_D 端口的中断触发位                            |
|       //这些位仅在CC寄存器的I1和I0位都为“1”(级别1)时才可以写入  |
|               00: 下降沿和低电平触发                        |
|               01: 仅上升沿触发                             |
|               10: 仅下降沿触发                             |
|               11: 上升沿和下降沿触发                        |
|__________________________________________________________|
|  PCIS[5:4]                                              |
|       //PORT_C 端口的中断触发位                            |
|       //这些位仅在CC寄存器的I1和I0位都为“1”(级别1)时才可以写入  |
|               00: 下降沿和低电平触发                        |
|               01: 仅上升沿触发                             |
|               10: 仅下降沿触发                             |
|               11: 上升沿和下降沿触发                        |
|__________________________________________________________|
|  PBIS[3:2]                                              |
|       //PORT_B 端口的中断触发位                            |
|       //这些位仅在CC寄存器的I1和I0位都为“1”(级别1)时才可以写入  |
|               00: 下降沿和低电平触发                        |
|               01: 仅上升沿触发                             |
|               10: 仅下降沿触发                             |
|               11: 上升沿和下降沿触发                        |
|__________________________________________________________|
|  PAIS[1:0]                                              |
|       //PORT_A 端口的中断触发位                            |
|       //这些位仅在CC寄存器的I1和I0位都为“1”(级别1)时才可以写入  |
|               00: 下降沿和低电平触发                        |
|               01: 仅上升沿触发                             |
|               10: 仅下降沿触发                             |
|               11: 上升沿和下降沿触发                        |
|__________________________________________________________|


| EXTI_CR2  //外部中断控制寄存器2
|_______________________________________________________|
|  -   |  -   |  -   |  -   |  -   | TLIS |  PEIS[1:0]  |
|______|______|______|______|______|______|______|______|__
|  TLIS[3]                                                 |
|       //高级中断触发位, 此位由软件设置。                      |
|       //此位仅在外部相应的中断引脚PD7禁止中断时才能写入          |
|               0: 下降沿触发                                |
|               1: 上升没触发                                |
|__________________________________________________________|
|  PEIS[1:0]                                               |
|       //PORT_E端口的中断触发位                              |
|       //这些位仅仅在CC寄存器的I1和I0位都为1(级别3)时才可以写入   |
|               00: 下降沿和低电平触发                         |
|               01: 仅上升沿触发                              |
|               10: 仅下降沿触发                              |
|               11: 上升沿和下降沿触发                         |
|___________________________________________________________|

