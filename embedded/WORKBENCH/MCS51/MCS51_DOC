/*******************************************************************************
                                MCS-51时序
*******************************************************************************/
//一个机器周期是振荡频率的12分频，含有6个状态时时间S， 依次表示为S1~S6
//由于一个状态时间S双包括2个节拍P，因此一个机器周期共有12个节拍。分别记作：
__S1P1, S1P2, S2P1, S2P2, S3P1, S3P2, S4P1, S4P2, S5P1, S5P2, S6P1, S6P2
1个振荡周期  = 1个节拍
1个状态时间  = 2个节拍(p1 p2)
1个机器周期  = 6个状态时间
1个机器周期  = 12个振荡周期
1个机器周期  = 12个节拍


//时序之间的关系
振荡周期:   Tosc = 1/fosc
状态时间:   S    = 2Tosc
地址锁在
有效信号:   ALE  = 6Tosc
机器周期:   MAC  = 12Tosc



/*******************************************************************************
                               MCS-51存储系统
*******************************************************************************/
00H~1FH  // 通用寄存器区R0~R7(分为4组 //
//任意时刻CPU只能使用其中一组寄存器，它是由PSW寄存器(RS1,RS0)设置
MOV  A, R0      <===>      MOV  A, 00H
_________________________________________________________________
| GRP0  |  07  |  06  |  05  |  04  |  03  |  02  |  01  |  00  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP1  |  0F  |  0E  |  0D  |  0C  |  0B  |  0A  |  09  |  08  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP2  |  17  |  16  |  15  |  14  |  13  |  12  |  11  |  10  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP3  |  1F  |  1E  |  1D  |  1C  |  1B  |  1A  |  19  | 18   |
|_______|______|______|______|______|______|______|______|______|



20H~2FH  // 共16个单元, 位地址: 00H~7FH //
|___________________|
|  CLR     00H      | //清除位地址00H单元
|___________________|
_________________________________________________________________
|   0   |  27  |  26  |  25  |  24  |  23  |  22  |  21  |  20  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  2F  |  2E  |  2D  |  2C  |  2B  |  2A  |  29  |  28  |
|_______|______|______|______|______|______|______|______|______|



30H~7FH // 为用户RAM区(数据缓冲区, 堆栈区, 共有80个单元) //
_________________________________________________________________
|   0   |  37  |  36  |  35  |  34  |  33  |  32  |  31  |  30  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  3F  |  3E  |  3D  |  3C  |  3B  |  3A  |  39  |  38  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   2   |  47  |  46  |  45  |  44  |  43  |  42  |  41  |  40  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   3   |  4F  |  4E  |  4D  |  4C  |  4B  |  4A  |  49  |  48  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   4   |  57  |  56  |  55  |  54  |  53  |  52  |  51  |  50  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   5   |  5F  |  5E  |  5D  |  5C  |  5B  |  5A  |  59  |  58  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   6   |  67  |  66  |  65  |  64  |  63  |  62  |  61  |  60  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   7   |  6F  |  6E  |  6D  |  6C  |  6B  |  6A  |  69  |  68  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   8   |  77  |  76  |  75  |  74  |  73  |  72  |  71  |  70  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   9   |  7F  |  7E  |  7D  |  7C  |  7B  |  7A  |  79  |  78  |
|_______|______|______|______|______|______|______|______|______|



                // 内部程序存储器ROM //
___________________________________________________________
1 0000H~0002H   //系统启动单元，单片机复位后(PC=0000H)
2 0003H~000AH   //外部中断0地址区
3 000BH~0012H   //定时/计数器0中断地址区
4 0013H~001AH   //外部中断1地址区
5 001BH~0022H   //定时/计数器1中断地址区
6 0023H~002AH   //串行中断地址区
___________________________________________________________


___________________________________________________________
EA = 1          //使用内部程序存储区ROM
EA = 0          //使用外部程序存储区ROM
___________________________________________________________



/*******************************************************************************
                             MCS-51特殊功能寄存器
*******************************************************************************/
1 A             //8bit-累加器ACC
2 B             //8bit-寄存器B
3 PC            //16bit-程序计数器(寻址范围64K)
4 DPTR          //16bit-数据指针
                //在访问外部64K数据存储器时作为地址指针使用
                //可以分为2个8位寄存器(高位字节DPH + 低位字节DPL)
5 SP            //8bit-堆栈指针(系统复位SP=07H)
                //(SP应该设置为30H之后)(SP向上生长)




// PSW_程序状态字寄存器
________________________________________________________________
|  CY   |  AC  |  F0   |  RS1  |  RS0  |  OV   |   -   |   P   |
|_______|______|_______|_______|_______|_______|_______|_______|
CY_Carry 进位标志位, 位累加器C
            //因为51单片机一般是对8位数据的操作
            //当数据的最高位（D7）进行例如加法操作产生进位时，CY就会置1。
            //否则CY等于0；当进行8位减法时，若运算结果有借位，则CY=1，否则C=0。
AC_Assistant Carry 辅助进位标志位
            //如果低半字节的最高位（D3）有进位，则AC=1，否则AC=0；
            //当进行8位减法运算时，如果（D3）有借位，则AC=1，否则AC=0。
F0 用户标志位
            //这是用户定义的一个状态标志。可以通过软件对它置位或清零。
RS1, RS0 工作寄存器组选择位
            //可以在编程的时候置位或清零，以选择4个工作寄存器组中的一个进行工作。
            //一个寄存器组有8字节，有四组寄存器，一共32字节。在片内数据存储区中的00H~1FH。 
OV_Overflow 溢出标志位
            //当进行有符号（signed）数加减法运算时，由硬件自动置位或清零。
            //当OV=1时，表示一个数字已经超出了累加器以补码形式表示一个有符
            //号数的范围，即超出了-128~+127的范围。

            //在8位补码中，D7一般用来表示符号位，D6~D0用来表示二进制数字。
            //所以，在加法时，如果最高位（D7）和次高位（D6）中有一个进位，或
            //在减法时两个中有一个借位，OV将被置位。

            //执行乘法指令（MUL  AB）也会影响OV标志位，当乘积大于255时，OV=1，否则OV=0。
            //执行除法指令时也会影响OV标志位

            //@@@要注意，溢出和进位是两个不同的概念，进位是指无符号数运算时ACC中D7向更高位
            //的进位。溢出是指带符号数补码运算时，运算结果超出8位二进制补码的表示范围。
            //另外，OV的状态可以由ACC的D7和D6相异或得出。 
P_Parity  奇偶标志位
            //每执行一条汇编指令，单片机都能根据A中1的个数的奇偶自动令P置位或清零，奇为1，偶为0。
            //此标志位对串行通信的数据传输非常有用，通过奇偶校验可以检验传输的可靠性。 


// IE_中断允许控制寄存器
________________________________________________________________
|  EA   |  -   |   -   |  ES   |  ET1  |  EX1  |  ET0  |  EX0  |
|_______|______|_______|_______|_______|_______|_______|_______|



// TMOD_定时器方式选择控制寄存器(@不能进行位寻址)
________________________________________________________________
|           Timer 1            |          Timer 0              |
|______________________________|_______________________________|
| GATE  | C/T  |  M1   |  M0   | GATE  |  C/T  |  M1   |  M0   |
|_______|______|_______|_______|_______|_______|_______|_______|
1 GATE 门控位
  0       //不用外部门，只将TR0/TR1来启动定时器
  1       //使用外部门，外部请求信号INT0/INT1(高电平)和TR0/TR1(置“1”)共同来启动定时器  
2 C/T 定时器/计数器方式选择位
  0       //定时器
  1       //计数器 
3 M1 M0工作方式选择位
//M1    M0    工作方式       功能说明
  0     0    工作方式0   //13位定时器/计数器(TL0低5位, TH0高8位)
  0     1    工作方式1   //16位定时器/计数器
  1     0    工作方式2   //自动填充8位定时器/计数器
  1     1    工作方式3   //定时器0和定时器1的功能是不一样的




/*******************************************************************************
                              MCS-51寻址方式
*******************************************************************************/
在单片机的存储空间中寻找指令规定的操作数据的地址，并将操作数据取出来。
|_________________________________________________________|
| Rn              //当前寄存器组的8个通用寄存器R0~R7           | 
| Ri              //用作间接寻址的寄存器，i = 0, 1             | 
| direct          //8位直接地址                              | 
| rel             //8位有符号立即数                           | 
| #data           //8位立即数                                | 
| #data16         //16位立即数                               | 
| addr16          //16位目的地址                              | 
| addr11          //11位目的地址                              | 
| rel             //相对转移指令中的偏移量,为8位有符号补码数       | 
| DPTR            //数据指针                                  | 
| bit             //内部RAM（包括专用寄存器）中的直接寻址位        | 
| A               //累加器                                    | 
| B               //寄存器B                                   | 
| C               //进位标志位，它是布尔处理机的累加器，也称之为累加位| 
| @               //间址寄存器的前缀标志                       | 
| /               //加在位地址的前面，表示对该位状态取反          | 
|___________________________________________________________|



1 //寄存器寻址方式
__________________________________
| MOV  A,  Rn                    |
|________________________________|


2 //直接寻址方式
  //指令中操作数直接以单元地址的形式给出 
__________________________________
| MOV  A,  direct                |
|________________________________|


3 //寄存器间接寻址方式
  //寄存器中存放的是操作数的地址，即操作数是通过寄存器间接得到的
  //内部RAM低128单元，间址寄存器： i = 0, 1
__________________________________
| MOV   A,  @Ri                  |
|________________________________|
  // 外部RAM-64KB //
__________________________________
| MOVX  A,  @DPTR                |
|________________________________|
  // 外部RAM低256单元
__________________________________
| MOVX  A,  @Ri                  |
|________________________________|

  //堆栈操作指令(PUSH POP)
  //也应算是寄存器间接寻址，即以堆栈指针（SP）作间址
  //寄存器的间接寻址方式。


4 //立即寻址方式
__________________________________
| MOV  A,  #data8                |
|________________________________|
__________________________________
| MOV  DPTR,  #data16            |
|________________________________|


5 //变址寻址方式 -> 访问程序存储区ROM
  //是以DPTR或PC作基址寄存器，以累加器A作变址寄存器，
  //并以两者内容相加形成的16位地址作为操作数地址，以
  //达到访问程序存储区中数据表格的目的。
__________________________________
| MOVC  A,  @A+DPTR              |
|________________________________|
__________________________________
| MOVC  A,  @A+PC                |
|________________________________|


6 //位寻址方式
  //查寻片内RAM单元中的 20H~2FH，位地址（00H~7FH） 和允许
  //进行位操作的专用寄存器中的位地址，从该地址中取出位数据进行操作。
__________________________________
| MOV   C,  3AH                  |
|________________________________|
__________________________________
| SETB  D5H                      |
| SETB  F0                       |
| SETB  PSW.5                    |
|________________________________|


6 //相对寻址方式
  //是为了解决程序转移而专门设置的。
转移目的地址 = 转移指令地址 + 转移指令字节数 + rel
__________________________________
| JZ   rel                       |
|________________________________|



/*******************************************************************************
                              MCS-51指令系统
*******************************************************************************/
//MCS-51单片机指令系统共有基本指令111条，分为五大类
|____________________________________________|
|       1 数据传送类指令( 29 )                 |
|       2 算术运算类指令( 24 )                 |
|       3 逻辑运算及移位类指令( 24 )            |
|       4 控制转移类指令( 17 )                 | 
|       5 位操作类指令( 17 )                   |
|____________________________________________|
//MCS-51单片机指令系统以字节数划分
|____________________________________________|
|       1 单字节指令 49 条                     |
|       2 双字节指令 45 条                     |
|       3 三字节指令 17 条                     |
|____________________________________________|
//MCS-51单片机指令系统以时间划分
|____________________________________________|
|       1 单周期指令 64 条                     |
|       2 双周期指令 45 条                     |
|       3 四周期指令 2 条（乘除指令）            |
|____________________________________________|




                   // 数据交换指令 //
___________________________________________________________
1 //整字节交换指令
  //字节单元与累加器A进行8位数据交换
2 //半字节交换指令
  //字节单元与累加器A进行低4位的半字节数据交换
3 //累加器高低半字节交换指令



                   // 堆栈操作指令组 //
___________________________________________________________
__________________________________
| PUSH                           |
|________________________________|
__________________________________
| POP                            |
|________________________________|



                     // 算术运算指令 //
___________________________________________________________
//加法指令
__________________________________
| ADD                            |
|________________________________|
//带进位的加法指令
__________________________________
| ADDC                           |
|________________________________|
带进位的减法指令
__________________________________
| SUBC                           |
|________________________________|
//加1指令
__________________________________
| INC                            |
|________________________________|
//减1指令
__________________________________
| DEC                            |
|________________________________|
//乘法指令
//(A)=50H (B)=0A0H 即乘积为3200H
//结果：(B)=32H, (A)=00H
//标志：CY=0 
//标志：OV=1（用来指示这个乘积是8位还是16位数据）
__________________________________
| MUL   AB                       |
|________________________________|

//除法指令
//被除数放在（A），除数放在（B），商放在（A），余数（B）
//标志：当除数为0（B=0）时，OV置1，表明除法没有意义
__________________________________
| DIV   AB                       |
|________________________________|

//10进制调整指令
__________________________________
| DA                             |
|________________________________|



                   // 移位运算指令 //
___________________________________________________________
//循环左移
__________________________________
| RL    A                        |
|________________________________|
//循环右移
__________________________________
| RR    A                        |
|________________________________|
//带进位循环左移
__________________________________
| RLC   A                        |
|________________________________|
//带进位循环右移
__________________________________
| RRC   A                        |
|________________________________|



                    // 转移控制指令 //
___________________________________________________________

//长转移指令，转移范围 ROM-64KB
__________________________________
| LJMP    addr16                 |
|________________________________|

    
//绝对转移指令，转移范围:PC+2后的当前地址的2K
__________________________________
| AJMP    addr11                 |
|________________________________|     
//程序中2070H地址单元有绝对转移指令
        2070:   AJMP    16AH
//取出绝对转移指令后( PC = 2070H + 2 = 2072H )
0 0 1 0 - 0 0 0 0 - 0 1 1 1 - 0 0 1 0   //PC=2072H
            0 0 1 - 0 1 1 0 - 1 0 1 0   //绝对地址=16AH
0 0 1 0 - 0 0 0 1 - 0 1 1 0 - 1 0 1 0   //PC=216AH


//短转移指令, rel对应的是8位立即数
__________________________________
| SJMP    rel                    |
|________________________________|  
             

//数值比较转移指令
__________________________________
| CJNE  A, #data, rel            |
| CJNE  A, dirct, rel            |
| CJNE  Rn, #data, rel           |
| CJNE  @Ri, #data, rel          |
|________________________________|


//减1条件转移指令
//先对寄存器Rn的内容减1，再判断寄存器Rn的内容是否为“0”
//如果寄存器Rn的内容不等于“0”，则发生转移
__________________________________
| DJNZ  Rn, rel                  |
|________________________________|  
//直接寻址单元减1条件转移指令
__________________________________
| DJNZ  direct, rel              |
|________________________________|




                    // 子程序调用与返回指令 //
___________________________________________________________
//绝对调用指令
//子程序调用范围是2KB
__________________________________
| ACALL addr11                   |
|________________________________|

//长调用指令
//子程序调用范围是64KB
__________________________________
| LCALL addr16                   |
|________________________________|


//子程序返回使用
__________________________________
| RET                            |
|________________________________|
//中断服务子程序返回使用
__________________________________
| RETI                           |
|________________________________|



                      // 位运算指令 //
___________________________________________________________
//位处理器的硬件资源
1 位累加器C，它是位传送的中心。位处理使用进位标志（CY）作为累加器
  把ACC称之为字节累加器，而把CY称之为位累加器（C）
2 内部RAM位寻址区的128可寻址位（00H~7FH）
3 专用寄存器中的83位可寻址位（包括输入，输出口）
//CY = bit
__________________________________
| MOV   C, bit                   |
|________________________________|
//bit = CY
__________________________________
| MOV   bit, C                   |
|________________________________|

 //将20H位的内容传送5AH位, 以位累加器CY为中转
|_________________________________________|
| MOV   10H, C        //暂存CY内容到10H位   |
| MOV   C, 20H        //20H位送CY          |
| MOV   5AH, C        //20H位通过CY送5AH位  |
| MOV   C, 10H        //恢复CY内容          |
|__________________________________________|

//对位累加器或可寻址位进行，清零，置位，取反
|_______________________________|
| CLR   bit                     |
| SET   bit                     |
| CPL   bit                     |
|_______________________________|

 //位逻辑运算指令
__________________________________
| ANL   C, bit                   |
|________________________________|
__________________________________
| ORL   C, bit                   |
|________________________________|
__________________________________
| ANL   C, /bit                  |
|________________________________|
__________________________________
| ORL   C, /bit                  |
|________________________________|

  //位条件转移指令
|__________________________________________________________|
| JC    rel             //C=1, 转移                         |
| JNC   rel             //C=0, 转移                         |
| JB    bit, rel        //bit=1, 转移                       |
| JNB   bit, rel        //bit=0, 转移                       |
| JBC   bit, rel        //bit=1, bit位清0并转移              | 
|__________________________________________________________|



