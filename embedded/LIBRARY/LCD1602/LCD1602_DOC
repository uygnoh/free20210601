############################################################
### % LCD1602_HD44870
############################################################
LCD1602引脚定义(8051_12MHz)
VCC     % 电源正 VDD
GND     % 电源地 VSS
VL      % 液晶显示偏压信号，调节对比度
BL+     % 背光源正极 [BLA]
BL-     % 背光源负极 [BLk]
RS      % 数据/命令选择端(H/L)
RW      % 读 / 写 选择端(H/L)
EN      % 使能信号
D1,D2,D3,D4,D5,D6,D7,D8,数据端口 [8个引脚接P0端口]
注意： LCD1602共可以显示 2行，
    第一行起始地址为：0x80,
    第二行起始地址为：0x80+0x40. 


% LCD1602 液晶显示模块
___________________________________________________________
0 LCD   % Liquid Crystal Display
1 16    % 每一行可以显示16个字符 
2 02    % 一共有两行


% LCD1602 地址, 最高位固定为“1”(0x80)
___________________________________________________________
0x00    0x01    0x02    0x03    ...     0x0F % 0x10 ... 0x27
0x40    0x41    0x42    0x43    ...     0x4F % 0x50 ... 0x57


% LCD1602 模块字库表
___________________________________________________________
    ->0010 0000     ->0x20
!   ->0010 0001     ->0x21
"   ->0010 0010     ->0x22
___________________________________________________________
0   ->0011 0000     ->0x30
1   ->0011 0001     ->0x31
2   ->0011 0010     ->0x32
___________________________________________________________
A   ->0100 0001     ->0x41
B   ->0100 0010     ->0x42
S   ->0101 0011     ->0x53
___________________________________________________________
a   ->0110 0001     ->0x51
b   ->0110 0010     ->0x52





############################################################
### % main.c
############################################################
#include<reg52.h>
#define uint16_t unsigned int
#define uint8_t unsigned char
#define DATA_1602   P0      /* 数据端口 */
#define BUSY        0x80    /* 检测忙状态 */
 
sbit RS = P2^6;
sbit RW = P2^5;
sbit EN = P2^7;


int main(void)
{
    lcd1602_init();
    lcd1602_write_cmd(0x80);        //给出地址指针，第一行的第1个字符位
    lcd1602_write_dat('y');         //写入数据
    lcd1602_write_cmd(0x80+5);      //给出地址指针,第一行第6个字符位
    lcd1602_write_dat('0');         //显示0
    lcd1602_write_dat(0x30);        //显示0
    lcd1602_write_cmd(0x80+0x40);   //给出地址指针，第二行的第1个字符
    lcd1602_write_dat(0x38);        //显示数字 8
    
    lcd1602_string_set(0,0,"hello,");
	lcd1602_string_set(4,1,"world!");
}



############################################################
### % LCD1602 <===> 底层函数
############################################################
/* % 单片机向LCD1602发送命令 */
void lcd1602_write_cmd(uint8_t cmd)
{   
    RS  = 0;                    /* % RS为“0”低电平表示要写入的是命令 */
    RW  = 0;                    /* % RW为“0”低电平表示是“写”操作 */
    EN  = 0;                    /* % EN为使能信号，关闭使能信号 */
    LCD_PORT = cmd;             /* % 单片机发送数据到“并行IO”端口上 */
    delay_us(2);                /* % 稍作延时，等待数据稳定 */
    EN  = 1;                    /* % 拉高使能信号，数据开始写入LCD1602中 */
    delay_us(2);                /* % 稍作延时，等待数据写入完成 */
    EN  = 0;                    /* % 拉低使能信号 */
    delay_us(2);                /* % 稍作延时 */
}


/* % 单片机向LCD1602发送数据 */
void lcd1602_write_dat(uint8_t dat)
{   
    RS  = 1;                    /* % RS为“1”高电平表示要写入的是数据 */
    RW  = 0;                    /* % RW为“0”低电平表示是写信号 */
    EN  = 0;                    /* % EN为使能信号，关闭使能信号 */
    LCD_PORT = cmd;             /* % 单片机发送数据到“并行IO”端口上 */
    delay_us(2);                /* % 稍作延时，等待数据稳定 */
    EN  = 1;                    /* % 拉高使能信号，数据开始写入LCD1602中 */
    delay_us(2);                 /* % 稍作延时，等待数据写入完成 */
    EN  = 0;                    /* % 拉低使能信号 */
    delay_us(2);                 /* % 稍作延时 */
}


/* % LCD1602 初始化 */
void lcd1602_init(void)
{
    delay_ms(15);               /* % 延时15ms */
    lcd1602_write_cmd(0x38);    /* % 显示模式设置 */
    delay_ms(5);                /* % 延时5ms */
    lcd1602_write_cmd(0x0f);    /* % 光标显示[0x0E,光标不闪][0x0C，光标不显示] */
    delay_ms(5);                /* % 延时5ms */
    lcd1602_write_cmd(0x0c);    /* % 显示开及光标设置 */
    delay_ms(5);                /* % 延时5ms */
    lcd1602_write_cmd(0x06);    /* % 显示光标移动设置(地址指针自动加1) */
    delay_ms(5);                /* % 延时5ms */
    lcd1602_write_cmd(0x01);    /* % 显示清屏 */
    delay_ms(5);                /* % 延时5ms */
}


/* % lcd1602判断忙 */
void lcd1602_busy_check(void)
{
    uint8_t tmp;
    LCD_PORT = 0xFF;        /* % 设置LCD_PORT全部为高电平 */
    do {
        RS = 0;             /* % RS为“0”, 表示“读命令” */
        RW = 1;             /* % RW为“1”, 表示“读”*/
        EN = 0;             /* % EN为“0”, 关闭使能 */
        EN = 1;             /* % 拉高“EN”，产生一个上升沿 */
        delay_us(2);        /* % 稍作延时，等待lcd1602上的数据稳定 */
        tmp = LCD_PORT;     /* % 读取lcd1602上的数据 */
        delay_us(2);        /* % 稍作延时 */
        EN = 0;             /* % 拉低EN */
        delay_us(2);        /* % 稍作延时 */
    } while (tmp & 0x80);   /* % 判断LCD_PORT端口上的数据最高位，为“1”表示忙 */
}




/* % set a character at the given position */ 
/* % 在指定坐标设置字符 (x=0~15, y=0~1) */
void lcd1602_show_char(uint8_t pos_x, uint8_t pos_y, uint8_t t_char)
{
    uint8_t addr = 0x80;        /* % lcd1602基地址 */
    pos_x &= 0x0f;              /* % 列地址，共有16列; 取列地址 */
    pos_y &= 0x01;              /* % 行地址，共有2行; 取行地址* /
    addr  |= pos_x;             /* % 获得lcd1602地址值 */
    if (pos_y)                  /* % 判断lcd1602是第几行(0或1) */                    
        addr |= 0x40;           /* % 如果是第2行的话，加“0x40” */
    lcd1602_write_cmd(addr);    /* % lcd1602写入位置信息 */
    lcd1602_write_dat(t_char);  /* % lcd1602写入数据信息 */
}


/* % write a string from the given position */
/* % 从指定位置开始设置字符串 (p_x=0~15，p_y=0~1，p_string必须是以'\0'结尾的字符串) */
void lcd1602_show_string(uint8_t pos_x, uint8_t pos_y, const uint8_t *pstr)
{
    uint8_t x, y;
    pos_x &= 0x0f;
    pos_y &= 0x01;
    /* % 最外层循环， 行(0, 1) */
    for (y = pos_y; y < 2; y++) 
    {
        /* % 内层循环， 列(0 ~ 15) */
        for (x = pos_x; (x < 16) && ((*pstr) != 0); x++)
            /* % 调用写一个字符串函数 */
            lcd1602_char_set(x, y, *pstr++);
    }
}



###########################################################
### % LCD1602 <===> 
###########################################################
% 检测LCD1602是否处于忙状态
% 检测LCD1602是否处于忙状态；返回1，则BUSY；返回0，则OK
__bit lcd1602_busy_check(void) 
{
    bit status;
    LCD_PORT = 0xFF;    /* % 设置LCD_PORT全部为高电平 */
    RS = 0;             /* % RS为“0”, 表示“读命令” */
    RW = 1;             /* % RW为“1”, 表示“读”*/
    EN = 0;             /* % EN为“0”, 关闭使能 */
    EN = 1;             /* % 拉高“EN”，产生一个上升沿 */
    delay_us(2);        /* % 稍作延时，等待lcd1602上的数据稳定 */
    status = (bit)(LCD_PORT & 0x80); 
    delay_us(2);        /* % 稍作延时 */
    EN = 0;             /* % EN为“0” */
    delay_us(2);        /* % 稍作延时 */
    return status;    
}



/* ms级延时子程序 
 * (8051, 12MHZ晶振)
 */
void delay_ms(uint16_t z)
{
    uint16_t x,y;
    for(x = z; x > 0; x--)
        for(y = 110; y > 0; y--);
}

