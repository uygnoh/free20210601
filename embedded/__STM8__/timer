/*******************************************************************************
                          UEV(更新事件) -> UIF(更新中断)
*******************************************************************************/
【1】更新事件发生后自动重装载寄存器(TIMX_ARR)中的配置数据会存放进入
    自动重装载寄存器的影子寄存器
【2】更新事件发生后预分频器寄存器(TIMX_PSCR)中的预分频值会写入到预
     分频器的缓冲器中
【3】更新事件发生后状态寄存器(TIMX_SR)中的“UIF”位(更新中断标志)会
    被硬件自动置为“1”
【4】//更新事件的作用: 刷新相关寄存器配置值
    若用户欲启用更新事件中断，则配置中断使能寄存器(TIMX_IER)中的
    “UIE”位为“1”即可


  
/*******************************************************************************
                             TIMER_4 程序框架
*******************************************************************************/
void timer4_init(void)
{
        TIM4_PSCR = 0xXX; //设置预分频寄存器数值
        TIM4_ARR  = 0xXX; //设置自动重装载寄存器
        TIM4_IER  = 0x01; //开启TIM4更新事件中断
        TIM4_CNTR = 0xXX; //配置TIM4定时器初值
}
int main(void)
{
        timer4_init();
        asm("rim");       //打开总中断，即降低主程序优先级别
        TIM4_CR1 |= 0x01; //使能计数器
}



/*******************************************************************************
                             TIMER_4 寄存器
*******************************************************************************/
|
| //TIM4_PSCR 预分频寄存器
|______________________________________________________________
|  [7:3]        //保留，必须保持清“0”
|  PSC[2:0]     //预分频值
|               用户配置预分频值后需要等待更新事件的发生，所设定的预分频
|               值才会生效，CK_PSC的时钟经过分频后得到CK_CNT时钟用于计
|               数
|______________________________________________________________
|
|
| //TIM4_CNTR 计数器(向上计数)
|______________________________________________________________
|  [7:0]        //计数器值
|______________________________________________________________
|
|
| //TIM4_ARR 自动重装载寄存器
|______________________________________________________________
|  [7:6]        //装载用户设定的计数最大值
|______________________________________________________________
|
|
| //TIM4_SR 状态寄存器
|______________________________________________________________
|  [7:1]        //保留，必须保持清“0”
|  UIF[0]       //更新中断标志位（只读）
|               //此位在更新事件发生时由硬件置“1”，可以软件清“0”
|               反应出是否发生了更新事件，在TIM4发生“计数溢出”后，可以
|               产生更新事件，若用户需要在更新事件产生的同时产生一个更新
|               中断信号，则可以通过配置该寄存器的“UIE”位为“1”  
|______________________________________________________________
|
|
| //TIM4_IER 中断使能寄存器
|______________________________________________________________
|  [7:1]        //保留，必须保持清“0”
|  UIE[0]       //更新中断使能
|    0          //更新事件发生时禁止更新中断
|    1          //更新事件发生时使能更新中断
|______________________________________________________________
|
|
| //TIM4_EGR 事件产生寄存器
|______________________________________________________________
|  [7:1]        //保留，必须保持清“0”
|  UG[0]        //更新事件产生
|    0          //当UDIS位为“1”（禁止产生更新事件）时，置位“UG”位为“0”
|               则不产生更新事件，但是计数器和预分步器分被初始化
|    1          //当UDIS位为“0”（禁止产生更新事件）时，置位“UG”位为“1”
|               则产生软件更新事件
|______________________________________________________________
|
|
| //TIM4_CR1 控制寄存器1
|______________________________________________________________
|  ARPE[7]      //自动预装载使能位
|    0          //自动重装载寄存器(TIM4_ARR)的配置值立即写入自动重装载
|               影子寄存器，不必等待更新事件发生
|    1          //在下一次更新事件发生时自动重装载(TIM4_ARR)的配置都会
|               写入自动重装载影子寄存器
|______________________________________________________________
|  [6:4]        //保留，必须保持清“0”
|______________________________________________________________
|  OP[3]        //单脉冲模式位
|    0          //计数器在更新事件时不停止
|    1          //在下一次更新事件时计数器停止计数（“CEN”位被硬件清“0”）
|______________________________________________________________
|  URS[2]       //更新中断请求位
|______________________________________________________________
|    0          //当更新中断使能(“UIE”位为“1”)，寄存器发生更新事件（
|               计数器向上溢出或者软件更新置位“UG”位为“1”）时立即发送
|               一个更新中断请求
|    1          //当更新中断使能(“UIE”位为“1”)，仅当计数器达到向上溢
|               出时才发送一个更新中断请求
|______________________________________________________________
|  UDIS[1]      //禁止更新位
|    0          //当计数器向上溢出或者软件更新置位“UG”位为“1”时，立即
|               产生一次更新事件，自动重装载寄存器(TIM4_ARR)中的值立即
|               加载到自动重装载影子寄存器中
|    1          //禁止产生更新事件，自动重装载寄存器(TIM4_ARR)的影子
|               寄存器和预分频器(TIM4_PSC)的缓冲器保持当前的值，如果
|               如果此时“UG”位置“1”，则计数器和预分频器被重新初始化
|______________________________________________________________
|  CEN[0]       //计数器使能位
|______________________________________________________________



//自定义 1Hz信号输出
_______________________________________________________________
void timer4_init(void)
{
        TIM4_PSCR = 0x03; //设置预分频寄存器数值得到 250KHz计数频率
        TIM4_ARR  = 0xFA; //设置自动重装载寄存器为 250，得到定时时间为 1ms
        TIM4_IER  = 0x01; //开启 TIM4 更新事件中断使能
        TIM4_CNTR = 0xFA; //配置 TIM4 定时器初值
        
}
