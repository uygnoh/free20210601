############################################################
### % 自动补全
############################################################
1 % https://download.eclipse.org/tools/cdt/releases/9.11
选择( CDT Main Features )

2 % http://download.eclipse.org/releases/photon
选择( General Purpose Tools ->Eclipse Plug-in Development Environment )


3、打开 window->show view，选择 plugin-ins。在plugin-ins找到 org.eclipse.cdt.ui 。
右键单击，选择import as -> source project，导入之后在你的 workspace就可以看到这个插件工程。

4、找到
/org.eclipse.cdt.ui/src/org.eclipse.cdt.internal.ui.text.contentassist/ContentAssistProcessor.java
修改public void setCompletionProposalAutoActivationCharacters(char[] activationSet)
public void setCompletionProposalAutoActivationCharacters(char[] activationSet) {
        //fCompletionAutoActivationCharacters= activationSet;
        String test = ".ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        char[] triggers = test.toCharArray();
        fCompletionAutoActivationCharacters = triggers;
}


5、找到
/org.eclipse.cdt.ui/src/org.eclipse.cdt.internal.ui.text.contentassist/CContentAssistProcessor.java
修改protected boolean verifyAutoActivation(ITextViewer viewer, int offset)
protected boolean verifyAutoActivation(ITextViewer viewer, int offset) {
    IDocument doc= viewer.getDocument();
    if (doc == null) {
        return false;
    }
    if (offset <= 0) {
        return false;
    }
    try {
        char activationChar= doc.getChar(--offset);
        switch (activationChar) {
        case ':':
            return offset > 0 && doc.getChar(--offset) == ':';
        case '>':
            return offset > 0 && doc.getChar(--offset) == '-';
        case '.':
            // Avoid completion of float literals
            CHeuristicScanner scanner= new CHeuristicScanner(doc);
            int token= scanner.previousToken(--offset, Math.max(0, offset - 200));
            // The scanner reports numbers as identifiers
            if (token == Symbols.TokenIDENT && !Character.isJavaIdentifierStart(doc.getChar(scanner.getPosition() + 1))) {
                // Not a valid identifier
                return false;
            }
            return true;
        // % 添加这两行代码
        default:
               return activationChar >= 97 && activationChar <= 122?true:activationChar >= 65 && activationChar <= 90;
        }
    } catch (BadLocationException e) {
    }
    return false;
}



6 下面就可以导出了，在工程上右键->Export，选择JAR file



############################################################
### % STM32CubeIDE调式Error
############################################################
STM32CubeIDE调式出现下面的错误
% arm-none-eabi-gdb: error while loading shared libraries: 
% libncurses.so.5: cannot open shared object file: No such file or directory
sudo apt install libncurses5



############################################################
### % STM32CubeIDE使用ITM调试
############################################################
0 % STM32CubeMX，进入到配置页面，
_____________________________
先配置“HCLK”，记好这个值



1 %  Ctrl+S 生成代码，打开main.c
_____________________________
添加以下代码到“main.c”文件中
#include "stdio.h"

int _write(int file, char *ptr, int len)
{
    int i = 0;
    for (i = 0; i < len; i++)
        ITM_SendChar((*ptr++));
    return len;
}

while (1)
{
    printf("Hello World!\n");
    HAL_Delay(1000);
}


2 % 点击小锤子构建项目，完成后点击Debug
_____________________________
点击 调试器选项卡，更改调试探头为实际使用的仿真器，勾选 [Enable SWV]，
并修改内核时钟为创建工程时设置的[HCLK]的值。点击 [Apply]，再点击OK。
% 进入到Debug页面后，点击 
Windows-->show View --->SWV--->SWV ITM data console
可以看到在下部出现了SWV ITM data console窗口，点击configure trace




###########################################################
### % STM32CubeIDE
###########################################################
1 % 函数跳转
按住键盘ctrl不放，然后用鼠标单击函数名，这们就能跳转到函数体中












