
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000454 	.word	0x20000454
 8000128:	00000000 	.word	0x00000000
 800012c:	08001198 	.word	0x08001198

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000458 	.word	0x20000458
 8000148:	08001198 	.word	0x08001198

0800014c <test>:
 * @param  None
 * @retval None
 */
void test(void);
void test(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint8_t i;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000152:	2101      	movs	r1, #1
 8000154:	2010      	movs	r0, #16
 8000156:	f000 fccd 	bl	8000af4 <RCC_APB2PeriphClockCmd>

    GPIO_InitTypeDef gpio_init;

    gpio_init.GPIO_Pin      = GPIO_Pin_13;
 800015a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800015e:	803b      	strh	r3, [r7, #0]
    gpio_init.GPIO_Speed    = GPIO_Speed_50MHz;
 8000160:	2303      	movs	r3, #3
 8000162:	70bb      	strb	r3, [r7, #2]
    gpio_init.GPIO_Mode     = GPIO_Mode_Out_PP;
 8000164:	2310      	movs	r3, #16
 8000166:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOC, &gpio_init);
 8000168:	463b      	mov	r3, r7
 800016a:	4619      	mov	r1, r3
 800016c:	480e      	ldr	r0, [pc, #56]	; (80001a8 <test+0x5c>)
 800016e:	f000 f96d 	bl	800044c <GPIO_Init>
    
    for (i = 0; i < 9; i++)
 8000172:	2300      	movs	r3, #0
 8000174:	71fb      	strb	r3, [r7, #7]
 8000176:	e010      	b.n	800019a <test+0x4e>
    {
        pcout(13) = 0;
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <test+0x60>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
        delay_ms(1000);
 800017e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000182:	f000 fd41 	bl	8000c08 <delay_ms>
        pcout(13) = 1;
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <test+0x60>)
 8000188:	2201      	movs	r2, #1
 800018a:	601a      	str	r2, [r3, #0]
		delay_ms(1000);
 800018c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000190:	f000 fd3a 	bl	8000c08 <delay_ms>
    for (i = 0; i < 9; i++)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b08      	cmp	r3, #8
 800019e:	d9eb      	bls.n	8000178 <test+0x2c>
    }
    
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40011000 	.word	0x40011000
 80001ac:	422201b4 	.word	0x422201b4

080001b0 <main>:

int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80001b6:	2101      	movs	r1, #1
 80001b8:	2008      	movs	r0, #8
 80001ba:	f000 fc9b 	bl	8000af4 <RCC_APB2PeriphClockCmd>

    GPIO_InitTypeDef gpio_init;

    gpio_init.GPIO_Pin      = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;
 80001be:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80001c2:	80bb      	strh	r3, [r7, #4]
    gpio_init.GPIO_Speed    = GPIO_Speed_2MHz;
 80001c4:	2302      	movs	r3, #2
 80001c6:	71bb      	strb	r3, [r7, #6]
    gpio_init.GPIO_Mode     = GPIO_Mode_Out_PP;
 80001c8:	2310      	movs	r3, #16
 80001ca:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &gpio_init);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4809      	ldr	r0, [pc, #36]	; (80001f8 <main+0x48>)
 80001d2:	f000 f93b 	bl	800044c <GPIO_Init>

    oled_init();
 80001d6:	f000 fd83 	bl	8000ce0 <oled_init>
    
    while(1)
    {
        test();
 80001da:	f7ff ffb7 	bl	800014c <test>
        oled_clear();
 80001de:	f000 fe55 	bl	8000e8c <oled_clear>
        delay_ms(500);
 80001e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e6:	f000 fd0f 	bl	8000c08 <delay_ms>
        oled_full();
 80001ea:	f000 fe89 	bl	8000f00 <oled_full>
        delay_ms(500);
 80001ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f2:	f000 fd09 	bl	8000c08 <delay_ms>
        test();
 80001f6:	e7f0      	b.n	80001da <main+0x2a>
 80001f8:	40010c00 	.word	0x40010c00

080001fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001fc:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001fe:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8000200:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000204:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000206:	493b      	ldr	r1, [pc, #236]	; (80002f4 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8000208:	6818      	ldr	r0, [r3, #0]
{
 800020a:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 800020c:	f040 0001 	orr.w	r0, r0, #1
 8000210:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000212:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000214:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000216:	4001      	ands	r1, r0
 8000218:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800021a:	6819      	ldr	r1, [r3, #0]
 800021c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000220:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000224:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800022c:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800022e:	6859      	ldr	r1, [r3, #4]
 8000230:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000234:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8000236:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000238:	9400      	str	r4, [sp, #0]
 800023a:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800023c:	6819      	ldr	r1, [r3, #0]
 800023e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000242:	6019      	str	r1, [r3, #0]
 8000244:	e003      	b.n	800024e <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000246:	9b00      	ldr	r3, [sp, #0]
 8000248:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800024c:	d009      	beq.n	8000262 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024e:	6813      	ldr	r3, [r2, #0]
 8000250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000254:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000256:	9b00      	ldr	r3, [sp, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f1      	beq.n	8000246 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000262:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <SystemInit+0xf4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800026a:	bf18      	it	ne
 800026c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026e:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000270:	9b01      	ldr	r3, [sp, #4]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d006      	beq.n	8000284 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800027a:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <SystemInit+0xfc>)
 800027c:	609a      	str	r2, [r3, #8]
}
 800027e:	b002      	add	sp, #8
 8000280:	bc30      	pop	{r4, r5}
 8000282:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000284:	491d      	ldr	r1, [pc, #116]	; (80002fc <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000288:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800028a:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800028c:	f040 0010 	orr.w	r0, r0, #16
 8000290:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000292:	6808      	ldr	r0, [r1, #0]
 8000294:	f020 0003 	bic.w	r0, r0, #3
 8000298:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800029a:	6808      	ldr	r0, [r1, #0]
 800029c:	f040 0002 	orr.w	r0, r0, #2
 80002a0:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002a2:	6859      	ldr	r1, [r3, #4]
 80002a4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002a6:	6859      	ldr	r1, [r3, #4]
 80002a8:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002aa:	6859      	ldr	r1, [r3, #4]
 80002ac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002b0:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002b2:	6859      	ldr	r1, [r3, #4]
 80002b4:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80002b8:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002ba:	6859      	ldr	r1, [r3, #4]
 80002bc:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80002c0:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 80002c2:	6819      	ldr	r1, [r3, #0]
 80002c4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80002c8:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	019b      	lsls	r3, r3, #6
 80002ce:	d5fc      	bpl.n	80002ca <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d0:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002d2:	4907      	ldr	r1, [pc, #28]	; (80002f0 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d4:	f023 0303 	bic.w	r3, r3, #3
 80002d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002da:	6853      	ldr	r3, [r2, #4]
 80002dc:	f043 0302 	orr.w	r3, r3, #2
 80002e0:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002e2:	684b      	ldr	r3, [r1, #4]
 80002e4:	f003 030c 	and.w	r3, r3, #12
 80002e8:	2b08      	cmp	r3, #8
 80002ea:	d1fa      	bne.n	80002e2 <SystemInit+0xe6>
 80002ec:	e7c3      	b.n	8000276 <SystemInit+0x7a>
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	f8ff0000 	.word	0xf8ff0000
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	40022000 	.word	0x40022000

08000300 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <SystemCoreClockUpdate+0x48>)
 8000302:	6853      	ldr	r3, [r2, #4]
 8000304:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000308:	2b08      	cmp	r3, #8
 800030a:	d10e      	bne.n	800032a <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800030c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800030e:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000310:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000314:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000316:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 800031a:	d510      	bpl.n	800033e <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800031c:	6852      	ldr	r2, [r2, #4]
 800031e:	0392      	lsls	r2, r2, #14
 8000320:	d40d      	bmi.n	800033e <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <SystemCoreClockUpdate+0x4c>)
 8000324:	fb02 f303 	mul.w	r3, r2, r3
 8000328:	e000      	b.n	800032c <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <SystemCoreClockUpdate+0x48>)
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <SystemCoreClockUpdate+0x50>)
 8000330:	6852      	ldr	r2, [r2, #4]
 8000332:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000336:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 8000338:	40d3      	lsrs	r3, r2
 800033a:	610b      	str	r3, [r1, #16]
}
 800033c:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <SystemCoreClockUpdate+0x54>)
 8000340:	fb02 f303 	mul.w	r3, r2, r3
 8000344:	e7f2      	b.n	800032c <SystemCoreClockUpdate+0x2c>
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	007a1200 	.word	0x007a1200
 8000350:	20000000 	.word	0x20000000
 8000354:	003d0900 	.word	0x003d0900

08000358 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000358:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 800035a:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <GPIO_DeInit+0xc0>)
 800035c:	4298      	cmp	r0, r3
 800035e:	d01c      	beq.n	800039a <GPIO_DeInit+0x42>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <GPIO_DeInit+0xc4>)
 8000362:	4298      	cmp	r0, r3
 8000364:	d023      	beq.n	80003ae <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000366:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <GPIO_DeInit+0xc8>)
 8000368:	4298      	cmp	r0, r3
 800036a:	d02a      	beq.n	80003c2 <GPIO_DeInit+0x6a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 800036c:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <GPIO_DeInit+0xcc>)
 800036e:	4298      	cmp	r0, r3
 8000370:	d031      	beq.n	80003d6 <GPIO_DeInit+0x7e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
 8000372:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <GPIO_DeInit+0xd0>)
 8000374:	4298      	cmp	r0, r3
 8000376:	d006      	beq.n	8000386 <GPIO_DeInit+0x2e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <GPIO_DeInit+0xd4>)
 800037a:	4298      	cmp	r0, r3
 800037c:	d041      	beq.n	8000402 <GPIO_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOG)
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <GPIO_DeInit+0xd8>)
 8000380:	4298      	cmp	r0, r3
 8000382:	d032      	beq.n	80003ea <GPIO_DeInit+0x92>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000384:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000386:	2101      	movs	r1, #1
 8000388:	2040      	movs	r0, #64	; 0x40
 800038a:	f000 fbcb 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 800038e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000392:	2100      	movs	r1, #0
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f000 bbc5 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	2004      	movs	r0, #4
 800039e:	f000 fbc1 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 80003a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80003a6:	2100      	movs	r1, #0
 80003a8:	2004      	movs	r0, #4
 80003aa:	f000 bbbb 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80003ae:	2101      	movs	r1, #1
 80003b0:	2008      	movs	r0, #8
 80003b2:	f000 fbb7 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 80003b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2008      	movs	r0, #8
 80003be:	f000 bbb1 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80003c2:	2101      	movs	r1, #1
 80003c4:	2010      	movs	r0, #16
 80003c6:	f000 fbad 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 80003ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2010      	movs	r0, #16
 80003d2:	f000 bba7 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80003d6:	2101      	movs	r1, #1
 80003d8:	2020      	movs	r0, #32
 80003da:	f000 fba3 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 80003de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80003e2:	2100      	movs	r1, #0
 80003e4:	2020      	movs	r0, #32
 80003e6:	f000 bb9d 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80003ea:	2101      	movs	r1, #1
 80003ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003f0:	f000 fb98 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 80003f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80003f8:	2100      	movs	r1, #0
 80003fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fe:	f000 bb91 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8000402:	2101      	movs	r1, #1
 8000404:	2080      	movs	r0, #128	; 0x80
 8000406:	f000 fb8d 	bl	8000b24 <RCC_APB2PeriphResetCmd>
}
 800040a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800040e:	2100      	movs	r1, #0
 8000410:	2080      	movs	r0, #128	; 0x80
 8000412:	f000 bb87 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00
 8000420:	40011000 	.word	0x40011000
 8000424:	40011400 	.word	0x40011400
 8000428:	40011800 	.word	0x40011800
 800042c:	40011c00 	.word	0x40011c00
 8000430:	40012000 	.word	0x40012000

08000434 <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000434:	2101      	movs	r1, #1
{
 8000436:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000438:	4608      	mov	r0, r1
 800043a:	f000 fb73 	bl	8000b24 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800043e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000442:	2100      	movs	r1, #0
 8000444:	2001      	movs	r0, #1
 8000446:	f000 bb6d 	b.w	8000b24 <RCC_APB2PeriphResetCmd>
 800044a:	bf00      	nop

0800044c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800044c:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800044e:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000450:	06e3      	lsls	r3, r4, #27
 8000452:	bf48      	it	mi
 8000454:	788b      	ldrbmi	r3, [r1, #2]
 8000456:	f004 050f 	and.w	r5, r4, #15
 800045a:	bf48      	it	mi
 800045c:	431d      	orrmi	r5, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800045e:	880b      	ldrh	r3, [r1, #0]
 8000460:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000464:	d033      	beq.n	80004ce <GPIO_Init+0x82>
 8000466:	2c48      	cmp	r4, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 8000468:	6802      	ldr	r2, [r0, #0]
 800046a:	f000 80f4 	beq.w	8000656 <GPIO_Init+0x20a>
 800046e:	2c28      	cmp	r4, #40	; 0x28
 8000470:	f000 8133 	beq.w	80006da <GPIO_Init+0x28e>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000474:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000476:	bf44      	itt	mi
 8000478:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800047c:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 800047e:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8000480:	bf44      	itt	mi
 8000482:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000486:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 800048a:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 800048c:	bf44      	itt	mi
 800048e:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000492:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8000496:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8000498:	bf44      	itt	mi
 800049a:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800049e:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 80004a2:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 80004a4:	bf44      	itt	mi
 80004a6:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80004aa:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 80004ae:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 80004b0:	bf44      	itt	mi
 80004b2:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80004b6:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 80004ba:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 80004bc:	bf44      	itt	mi
 80004be:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80004c2:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 80004c6:	0619      	lsls	r1, r3, #24
 80004c8:	f100 8104 	bmi.w	80006d4 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80004cc:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80004ce:	2bff      	cmp	r3, #255	; 0xff
 80004d0:	d94b      	bls.n	800056a <GPIO_Init+0x11e>
 80004d2:	2c28      	cmp	r4, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 80004d4:	6842      	ldr	r2, [r0, #4]
 80004d6:	d04a      	beq.n	800056e <GPIO_Init+0x122>
 80004d8:	2c48      	cmp	r4, #72	; 0x48
 80004da:	f040 808e 	bne.w	80005fa <GPIO_Init+0x1ae>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80004de:	05d9      	lsls	r1, r3, #23
 80004e0:	d505      	bpl.n	80004ee <GPIO_Init+0xa2>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004e2:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80004e6:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80004ea:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004ec:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80004ee:	059c      	lsls	r4, r3, #22
 80004f0:	d506      	bpl.n	8000500 <GPIO_Init+0xb4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004f2:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80004f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80004fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004fe:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000500:	0559      	lsls	r1, r3, #21
 8000502:	d506      	bpl.n	8000512 <GPIO_Init+0xc6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8000508:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800050c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000510:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000512:	051c      	lsls	r4, r3, #20
 8000514:	d506      	bpl.n	8000524 <GPIO_Init+0xd8>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000516:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 800051a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800051e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000522:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000524:	04d9      	lsls	r1, r3, #19
 8000526:	d506      	bpl.n	8000536 <GPIO_Init+0xea>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800052c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8000530:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000534:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000536:	049c      	lsls	r4, r3, #18
 8000538:	d506      	bpl.n	8000548 <GPIO_Init+0xfc>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 800053e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8000542:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000546:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000548:	0459      	lsls	r1, r3, #17
 800054a:	d506      	bpl.n	800055a <GPIO_Init+0x10e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8000550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8000554:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000558:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800055a:	041c      	lsls	r4, r3, #16
 800055c:	d504      	bpl.n	8000568 <GPIO_Init+0x11c>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800055e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8000562:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000566:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000568:	6042      	str	r2, [r0, #4]
  }
}
 800056a:	bc30      	pop	{r4, r5}
 800056c:	4770      	bx	lr
      if (currentpin == pos)
 800056e:	05d9      	lsls	r1, r3, #23
 8000570:	d505      	bpl.n	800057e <GPIO_Init+0x132>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8000576:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800057a:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800057c:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800057e:	059c      	lsls	r4, r3, #22
 8000580:	d506      	bpl.n	8000590 <GPIO_Init+0x144>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8000586:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800058a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800058e:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000590:	0559      	lsls	r1, r3, #21
 8000592:	d506      	bpl.n	80005a2 <GPIO_Init+0x156>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8000598:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800059c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005a0:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005a2:	051c      	lsls	r4, r3, #20
 80005a4:	d506      	bpl.n	80005b4 <GPIO_Init+0x168>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80005aa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80005ae:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005b2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005b4:	04d9      	lsls	r1, r3, #19
 80005b6:	d506      	bpl.n	80005c6 <GPIO_Init+0x17a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 80005bc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80005c0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005c4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005c6:	049c      	lsls	r4, r3, #18
 80005c8:	d506      	bpl.n	80005d8 <GPIO_Init+0x18c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 80005ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80005d2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005d6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005d8:	0459      	lsls	r1, r3, #17
 80005da:	d506      	bpl.n	80005ea <GPIO_Init+0x19e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80005e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80005e4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005e8:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005ea:	041b      	lsls	r3, r3, #16
 80005ec:	d5bc      	bpl.n	8000568 <GPIO_Init+0x11c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80005f2:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005f6:	6143      	str	r3, [r0, #20]
 80005f8:	e7b6      	b.n	8000568 <GPIO_Init+0x11c>
      if (currentpin == pos)
 80005fa:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 80005fc:	bf44      	itt	mi
 80005fe:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8000602:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8000604:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 8000606:	bf44      	itt	mi
 8000608:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800060c:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8000610:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 8000612:	bf44      	itt	mi
 8000614:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000618:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 800061c:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 800061e:	bf44      	itt	mi
 8000620:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8000624:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8000628:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 800062a:	bf44      	itt	mi
 800062c:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8000630:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 8000634:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 8000636:	bf44      	itt	mi
 8000638:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800063c:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 8000640:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 8000642:	bf44      	itt	mi
 8000644:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8000648:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 800064c:	041c      	lsls	r4, r3, #16
 800064e:	d58b      	bpl.n	8000568 <GPIO_Init+0x11c>
        tmpreg |= (currentmode << pos);
 8000650:	f365 721f 	bfi	r2, r5, #28, #4
 8000654:	e788      	b.n	8000568 <GPIO_Init+0x11c>
      if (currentpin == pos)
 8000656:	07d9      	lsls	r1, r3, #31
 8000658:	d504      	bpl.n	8000664 <GPIO_Init+0x218>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800065a:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800065c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8000660:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000662:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000664:	0799      	lsls	r1, r3, #30
 8000666:	d505      	bpl.n	8000674 <GPIO_Init+0x228>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000668:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800066a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800066e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000672:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000674:	0759      	lsls	r1, r3, #29
 8000676:	d505      	bpl.n	8000684 <GPIO_Init+0x238>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000678:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800067a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800067e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000682:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000684:	0719      	lsls	r1, r3, #28
 8000686:	d505      	bpl.n	8000694 <GPIO_Init+0x248>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000688:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800068a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800068e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000692:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000694:	06d9      	lsls	r1, r3, #27
 8000696:	d505      	bpl.n	80006a4 <GPIO_Init+0x258>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000698:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800069a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800069e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006a2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006a4:	0699      	lsls	r1, r3, #26
 80006a6:	d505      	bpl.n	80006b4 <GPIO_Init+0x268>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006a8:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80006aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80006ae:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006b2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006b4:	0659      	lsls	r1, r3, #25
 80006b6:	d505      	bpl.n	80006c4 <GPIO_Init+0x278>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006b8:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80006ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80006be:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006c2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006c4:	0619      	lsls	r1, r3, #24
 80006c6:	f57f af01 	bpl.w	80004cc <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006ca:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80006cc:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006d0:	6101      	str	r1, [r0, #16]
 80006d2:	e6fb      	b.n	80004cc <GPIO_Init+0x80>
        tmpreg |= (currentmode << pos);
 80006d4:	f365 721f 	bfi	r2, r5, #28, #4
 80006d8:	e6f8      	b.n	80004cc <GPIO_Init+0x80>
      if (currentpin == pos)
 80006da:	07d9      	lsls	r1, r3, #31
 80006dc:	d504      	bpl.n	80006e8 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006de:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80006e0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80006e4:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006e6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80006e8:	0799      	lsls	r1, r3, #30
 80006ea:	d505      	bpl.n	80006f8 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006ec:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80006ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80006f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006f6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d505      	bpl.n	8000708 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006fc:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80006fe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000702:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000706:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000708:	0719      	lsls	r1, r3, #28
 800070a:	d505      	bpl.n	8000718 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800070c:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800070e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8000712:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000716:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000718:	06d9      	lsls	r1, r3, #27
 800071a:	d505      	bpl.n	8000728 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800071c:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800071e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8000722:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000726:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000728:	0699      	lsls	r1, r3, #26
 800072a:	d505      	bpl.n	8000738 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800072c:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800072e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8000732:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000736:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000738:	0659      	lsls	r1, r3, #25
 800073a:	d505      	bpl.n	8000748 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800073c:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800073e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8000742:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000746:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000748:	0619      	lsls	r1, r3, #24
 800074a:	f57f aebf 	bpl.w	80004cc <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800074e:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8000750:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000754:	6141      	str	r1, [r0, #20]
 8000756:	e6b9      	b.n	80004cc <GPIO_Init+0x80>

08000758 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000758:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800075c:	2202      	movs	r2, #2
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800075e:	2304      	movs	r3, #4
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000760:	8001      	strh	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000762:	7082      	strb	r2, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000764:	70c3      	strb	r3, [r0, #3]
}
 8000766:	4770      	bx	lr

08000768 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000768:	6883      	ldr	r3, [r0, #8]
 800076a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800076c:	bf14      	ite	ne
 800076e:	2001      	movne	r0, #1
 8000770:	2000      	moveq	r0, #0
 8000772:	4770      	bx	lr

08000774 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000774:	6880      	ldr	r0, [r0, #8]
}
 8000776:	b280      	uxth	r0, r0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800077c:	68c3      	ldr	r3, [r0, #12]
 800077e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000780:	bf14      	ite	ne
 8000782:	2001      	movne	r0, #1
 8000784:	2000      	moveq	r0, #0
 8000786:	4770      	bx	lr

08000788 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000788:	68c0      	ldr	r0, [r0, #12]
}
 800078a:	b280      	uxth	r0, r0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000790:	6101      	str	r1, [r0, #16]
}
 8000792:	4770      	bx	lr

08000794 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000794:	6141      	str	r1, [r0, #20]
}
 8000796:	4770      	bx	lr

08000798 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000798:	b90a      	cbnz	r2, 800079e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800079a:	6141      	str	r1, [r0, #20]
  }
}
 800079c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800079e:	6101      	str	r1, [r0, #16]
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80007a4:	60c1      	str	r1, [r0, #12]
}
 80007a6:	4770      	bx	lr

080007a8 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80007a8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007ac:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80007ae:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007b0:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007b2:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007b4:	6983      	ldr	r3, [r0, #24]
}
 80007b6:	4770      	bx	lr

080007b8 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80007b8:	b410      	push	{r4}
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80007ba:	f64f 7480 	movw	r4, #65408	; 0xff80
  tmpreg = AFIO->EVCR;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <GPIO_EventOutputConfig+0x18>)
 80007c0:	6813      	ldr	r3, [r2, #0]
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80007c2:	4023      	ands	r3, r4
 80007c4:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80007c6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 80007ca:	6011      	str	r1, [r2, #0]
}
 80007cc:	bc10      	pop	{r4}
 80007ce:	4770      	bx	lr
 80007d0:	40010000 	.word	0x40010000

080007d4 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80007d4:	4b01      	ldr	r3, [pc, #4]	; (80007dc <GPIO_EventOutputCmd+0x8>)
 80007d6:	6018      	str	r0, [r3, #0]
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	4220001c 	.word	0x4220001c

080007e0 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80007e0:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007e4:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80007e8:	bfb4      	ite	lt
 80007ea:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80007ec:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007ee:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80007f2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80007f4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007f6:	d01e      	beq.n	8000836 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80007f8:	02c2      	lsls	r2, r0, #11
 80007fa:	d513      	bpl.n	8000824 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80007fc:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80007fe:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000802:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 8000804:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000808:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 800080c:	b119      	cbz	r1, 8000816 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800080e:	0d42      	lsrs	r2, r0, #21
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	4094      	lsls	r4, r2
 8000814:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000818:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 800081a:	bfb4      	ite	lt
 800081c:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800081e:	6053      	strge	r3, [r2, #4]
  }  
}
 8000820:	bc30      	pop	{r4, r5}
 8000822:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000824:	0d42      	lsrs	r2, r0, #21
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	fa04 f202 	lsl.w	r2, r4, r2
 800082c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000830:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000834:	e7ea      	b.n	800080c <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000836:	4d04      	ldr	r5, [pc, #16]	; (8000848 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000838:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800083c:	686a      	ldr	r2, [r5, #4]
 800083e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000842:	606a      	str	r2, [r5, #4]
 8000844:	e7e2      	b.n	800080c <GPIO_PinRemapConfig+0x2c>
 8000846:	bf00      	nop
 8000848:	40010000 	.word	0x40010000

0800084c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800084c:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800084e:	240f      	movs	r4, #15
 8000850:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000858:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800085c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000860:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000862:	0089      	lsls	r1, r1, #2
 8000864:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000866:	ea22 0204 	bic.w	r2, r2, r4
 800086a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	fa00 f101 	lsl.w	r1, r0, r1
 8000872:	4311      	orrs	r1, r2
 8000874:	6099      	str	r1, [r3, #8]
}
 8000876:	bc10      	pop	{r4}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 800087e:	6018      	str	r0, [r3, #0]
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	422000dc 	.word	0x422000dc

08000888 <RCC_DeInit>:

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000888:	f44f 001f 	mov.w	r0, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <RCC_DeInit+0x38>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800088e:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <RCC_DeInit+0x3c>)
  RCC->CR |= (uint32_t)0x00000001;
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	f041 0101 	orr.w	r1, r1, #1
 8000896:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000898:	6859      	ldr	r1, [r3, #4]
 800089a:	400a      	ands	r2, r1
 800089c:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80008a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008a8:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80008b8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 80008ba:	6098      	str	r0, [r3, #8]
#endif /* STM32F10X_CL */

}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	f8ff0000 	.word	0xf8ff0000

080008c8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80008ca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008d4:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008dc:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 80008de:	d008      	beq.n	80008f2 <RCC_HSEConfig+0x2a>
 80008e0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80008e4:	d104      	bne.n	80008f0 <RCC_HSEConfig+0x28>
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80008ec:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 80008ee:	4770      	bx	lr
 80008f0:	4770      	bx	lr
      RCC->CR |= CR_HSEON_Set;
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008f8:	601a      	str	r2, [r3, #0]
      break;
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <RCC_WaitForHSEStartUp>:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 8000900:	2300      	movs	r3, #0
{
 8000902:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <RCC_WaitForHSEStartUp+0x2c>)
  __IO uint32_t StartUpCounter = 0;
 8000906:	9301      	str	r3, [sp, #4]
    statusreg = RCC->CR;
 8000908:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800090a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    StartUpCounter++;  
 800090e:	9b01      	ldr	r3, [sp, #4]
 8000910:	f103 0301 	add.w	r3, r3, #1
 8000914:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000916:	9b01      	ldr	r3, [sp, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000918:	d102      	bne.n	8000920 <RCC_WaitForHSEStartUp+0x20>
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800091a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800091e:	d1f3      	bne.n	8000908 <RCC_WaitForHSEStartUp+0x8>
    statusreg = RCC->CR;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <RCC_WaitForHSEStartUp+0x2c>)
 8000922:	6818      	ldr	r0, [r3, #0]
}
 8000924:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000928:	b002      	add	sp, #8
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <RCC_AdjustHSICalibrationValue>:
  tmpreg = RCC->CR;
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <RCC_AdjustHSICalibrationValue+0x10>)
 8000932:	6813      	ldr	r3, [r2, #0]
  tmpreg &= CR_HSITRIM_Mask;
 8000934:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000938:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  RCC->CR = tmpreg;
 800093c:	6010      	str	r0, [r2, #0]
}
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <RCC_HSICmd>:
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <RCC_HSICmd+0x8>)
 8000946:	6018      	str	r0, [r3, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	42420000 	.word	0x42420000

08000950 <RCC_PLLConfig>:
  tmpreg = RCC->CFGR;
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <RCC_PLLConfig+0x10>)
 8000952:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PLL_Mask;
 8000954:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000958:	4319      	orrs	r1, r3
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800095a:	4301      	orrs	r1, r0
  RCC->CFGR = tmpreg;
 800095c:	6051      	str	r1, [r2, #4]
}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000

08000964 <RCC_PLLCmd>:
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <RCC_PLLCmd+0x8>)
 8000966:	6018      	str	r0, [r3, #0]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	42420060 	.word	0x42420060

08000970 <RCC_SYSCLKConfig>:
  tmpreg = RCC->CFGR;
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <RCC_SYSCLKConfig+0x10>)
 8000972:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_SW_Mask;
 8000974:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= RCC_SYSCLKSource;
 8000978:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 800097a:	6050      	str	r0, [r2, #4]
}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <RCC_GetSYSCLKSource+0xc>)
 8000986:	6858      	ldr	r0, [r3, #4]
}
 8000988:	f000 000c 	and.w	r0, r0, #12
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <RCC_HCLKConfig>:
  tmpreg = RCC->CFGR;
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <RCC_HCLKConfig+0x10>)
 8000996:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpreg |= RCC_SYSCLK;
 800099c:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 800099e:	6050      	str	r0, [r2, #4]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <RCC_PCLK1Config>:
  tmpreg = RCC->CFGR;
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <RCC_PCLK1Config+0x10>)
 80009aa:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80009ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  tmpreg |= RCC_HCLK;
 80009b0:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 80009b2:	6050      	str	r0, [r2, #4]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <RCC_PCLK2Config>:
  tmpreg = RCC->CFGR;
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <RCC_PCLK2Config+0x10>)
 80009be:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80009c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  tmpreg |= RCC_HCLK << 3;
 80009c4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  RCC->CFGR = tmpreg;
 80009c8:	6050      	str	r0, [r2, #4]
}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <RCC_ITConfig>:
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <RCC_ITConfig+0x14>)
 80009d2:	7813      	ldrb	r3, [r2, #0]
  if (NewState != DISABLE)
 80009d4:	b919      	cbnz	r1, 80009de <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80009d6:	ea23 0000 	bic.w	r0, r3, r0
 80009da:	7010      	strb	r0, [r2, #0]
}
 80009dc:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009de:	4318      	orrs	r0, r3
 80009e0:	7010      	strb	r0, [r2, #0]
 80009e2:	4770      	bx	lr
 80009e4:	40021009 	.word	0x40021009

080009e8 <RCC_USBCLKConfig>:
  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <RCC_USBCLKConfig+0x8>)
 80009ea:	6018      	str	r0, [r3, #0]
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	424200d8 	.word	0x424200d8

080009f4 <RCC_ADCCLKConfig>:
  tmpreg = RCC->CFGR;
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <RCC_ADCCLKConfig+0x10>)
 80009f6:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80009f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  tmpreg |= RCC_PCLK2;
 80009fc:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 80009fe:	6050      	str	r0, [r2, #4]
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <RCC_LSEConfig>:
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <RCC_LSEConfig+0x1c>)
  switch(RCC_LSE)
 8000a0c:	2801      	cmp	r0, #1
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a0e:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a10:	701a      	strb	r2, [r3, #0]
  switch(RCC_LSE)
 8000a12:	d005      	beq.n	8000a20 <RCC_LSEConfig+0x18>
 8000a14:	2804      	cmp	r0, #4
 8000a16:	d102      	bne.n	8000a1e <RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000a18:	2205      	movs	r2, #5
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	4770      	bx	lr
 8000a1e:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000a20:	7018      	strb	r0, [r3, #0]
      break;
 8000a22:	4770      	bx	lr
 8000a24:	40021020 	.word	0x40021020

08000a28 <RCC_LSICmd>:
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <RCC_LSICmd+0x8>)
 8000a2a:	6018      	str	r0, [r3, #0]
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	42420480 	.word	0x42420480

08000a34 <RCC_RTCCLKConfig>:
  RCC->BDCR |= RCC_RTCCLKSource;
 8000a34:	4a02      	ldr	r2, [pc, #8]	; (8000a40 <RCC_RTCCLKConfig+0xc>)
 8000a36:	6a13      	ldr	r3, [r2, #32]
 8000a38:	4318      	orrs	r0, r3
 8000a3a:	6210      	str	r0, [r2, #32]
}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <RCC_RTCCLKCmd>:
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a44:	4b01      	ldr	r3, [pc, #4]	; (8000a4c <RCC_RTCCLKCmd+0x8>)
 8000a46:	6018      	str	r0, [r3, #0]
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	4242043c 	.word	0x4242043c

08000a50 <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <RCC_GetClocksFreq+0x7c>)
{
 8000a52:	b410      	push	{r4}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a54:	6853      	ldr	r3, [r2, #4]
 8000a56:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d10f      	bne.n	8000a7e <RCC_GetClocksFreq+0x2e>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000a5e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000a60:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000a62:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000a66:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000a68:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8000a6c:	d528      	bpl.n	8000ac0 <RCC_GetClocksFreq+0x70>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000a6e:	6852      	ldr	r2, [r2, #4]
 8000a70:	0392      	lsls	r2, r2, #14
 8000a72:	d425      	bmi.n	8000ac0 <RCC_GetClocksFreq+0x70>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <RCC_GetClocksFreq+0x80>)
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	6003      	str	r3, [r0, #0]
 8000a7c:	e001      	b.n	8000a82 <RCC_GetClocksFreq+0x32>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <RCC_GetClocksFreq+0x80>)
 8000a80:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000a82:	4912      	ldr	r1, [pc, #72]	; (8000acc <RCC_GetClocksFreq+0x7c>)
  presc = APBAHBPrescTable[tmp];
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <RCC_GetClocksFreq+0x84>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000a86:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 4;
 8000a88:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000a8c:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a8e:	40e3      	lsrs	r3, r4
 8000a90:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000a92:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 8;
 8000a94:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000a98:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a9a:	fa23 f404 	lsr.w	r4, r3, r4
 8000a9e:	6084      	str	r4, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000aa0:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 11;
 8000aa2:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000aa6:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000aa8:	40e3      	lsrs	r3, r4
 8000aaa:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000aac:	6849      	ldr	r1, [r1, #4]
}
 8000aae:	bc10      	pop	{r4}
  tmp = tmp >> 14;
 8000ab0:	f3c1 3181 	ubfx	r1, r1, #14, #2
  presc = ADCPrescTable[tmp];
 8000ab4:	440a      	add	r2, r1
 8000ab6:	7c12      	ldrb	r2, [r2, #16]
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000abc:	6103      	str	r3, [r0, #16]
}
 8000abe:	4770      	bx	lr
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <RCC_GetClocksFreq+0x88>)
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	6003      	str	r3, [r0, #0]
 8000ac8:	e7db      	b.n	8000a82 <RCC_GetClocksFreq+0x32>
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	007a1200 	.word	0x007a1200
 8000ad4:	20000014 	.word	0x20000014
 8000ad8:	003d0900 	.word	0x003d0900

08000adc <RCC_AHBPeriphClockCmd>:
    RCC->AHBENR |= RCC_AHBPeriph;
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <RCC_AHBPeriphClockCmd+0x14>)
 8000ade:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 8000ae0:	b919      	cbnz	r1, 8000aea <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000ae2:	ea23 0000 	bic.w	r0, r3, r0
 8000ae6:	6150      	str	r0, [r2, #20]
}
 8000ae8:	4770      	bx	lr
    RCC->AHBENR |= RCC_AHBPeriph;
 8000aea:	4318      	orrs	r0, r3
 8000aec:	6150      	str	r0, [r2, #20]
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000

08000af4 <RCC_APB2PeriphClockCmd>:
    RCC->APB2ENR |= RCC_APB2Periph;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <RCC_APB2PeriphClockCmd+0x14>)
 8000af6:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8000af8:	b919      	cbnz	r1, 8000b02 <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000afa:	ea23 0000 	bic.w	r0, r3, r0
 8000afe:	6190      	str	r0, [r2, #24]
}
 8000b00:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b02:	4318      	orrs	r0, r3
 8000b04:	6190      	str	r0, [r2, #24]
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000

08000b0c <RCC_APB1PeriphClockCmd>:
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <RCC_APB1PeriphClockCmd+0x14>)
 8000b0e:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8000b10:	b919      	cbnz	r1, 8000b1a <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b12:	ea23 0000 	bic.w	r0, r3, r0
 8000b16:	61d0      	str	r0, [r2, #28]
}
 8000b18:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b1a:	4318      	orrs	r0, r3
 8000b1c:	61d0      	str	r0, [r2, #28]
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <RCC_APB2PeriphResetCmd>:
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <RCC_APB2PeriphResetCmd+0x14>)
 8000b26:	68d3      	ldr	r3, [r2, #12]
  if (NewState != DISABLE)
 8000b28:	b919      	cbnz	r1, 8000b32 <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b2a:	ea23 0000 	bic.w	r0, r3, r0
 8000b2e:	60d0      	str	r0, [r2, #12]
}
 8000b30:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b32:	4318      	orrs	r0, r3
 8000b34:	60d0      	str	r0, [r2, #12]
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000

08000b3c <RCC_APB1PeriphResetCmd>:
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <RCC_APB1PeriphResetCmd+0x14>)
 8000b3e:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 8000b40:	b919      	cbnz	r1, 8000b4a <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b42:	ea23 0000 	bic.w	r0, r3, r0
 8000b46:	6110      	str	r0, [r2, #16]
}
 8000b48:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b4a:	4318      	orrs	r0, r3
 8000b4c:	6110      	str	r0, [r2, #16]
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000

08000b54 <RCC_BackupResetCmd>:
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000b54:	4b01      	ldr	r3, [pc, #4]	; (8000b5c <RCC_BackupResetCmd+0x8>)
 8000b56:	6018      	str	r0, [r3, #0]
}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	42420440 	.word	0x42420440

08000b60 <RCC_ClockSecuritySystemCmd>:
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <RCC_ClockSecuritySystemCmd+0x8>)
 8000b62:	6018      	str	r0, [r3, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	4242004c 	.word	0x4242004c

08000b6c <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000b6c:	4b01      	ldr	r3, [pc, #4]	; (8000b74 <RCC_MCOConfig+0x8>)
 8000b6e:	7018      	strb	r0, [r3, #0]
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021007 	.word	0x40021007

08000b78 <RCC_GetFlagStatus>:
  tmp = RCC_FLAG >> 5;
 8000b78:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d00b      	beq.n	8000b96 <RCC_GetFlagStatus+0x1e>
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000b7e:	2b02      	cmp	r3, #2
    statusreg = RCC->BDCR;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <RCC_GetFlagStatus+0x30>)
  tmp = RCC_FLAG & FLAG_Mask;
 8000b82:	f000 001f 	and.w	r0, r0, #31
    statusreg = RCC->BDCR;
 8000b86:	bf0c      	ite	eq
 8000b88:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 8000b8a:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b8c:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8000b90:	f000 0001 	and.w	r0, r0, #1
 8000b94:	4770      	bx	lr
    statusreg = RCC->CR;
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <RCC_GetFlagStatus+0x30>)
  tmp = RCC_FLAG & FLAG_Mask;
 8000b98:	f000 001f 	and.w	r0, r0, #31
    statusreg = RCC->CR;
 8000b9c:	681b      	ldr	r3, [r3, #0]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b9e:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000ba2:	f000 0001 	and.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	40021000 	.word	0x40021000

08000bac <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000bac:	4a02      	ldr	r2, [pc, #8]	; (8000bb8 <RCC_ClearFlag+0xc>)
 8000bae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000

08000bbc <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <RCC_GetITStatus+0x10>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000bc2:	bf14      	ite	ne
 8000bc4:	2001      	movne	r0, #1
 8000bc6:	2000      	moveq	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <RCC_ClearITPendingBit+0x8>)
 8000bd2:	7018      	strb	r0, [r3, #0]
}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	4002100a 	.word	0x4002100a

08000bdc <delay_us>:

void delay_us(uint32_t nus)
{
	 uint32_t temp;
	 
	 SysTick->LOAD = 9*nus; 
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <delay_us+0x28>)
{
 8000bde:	b410      	push	{r4}
	 SysTick->VAL  = 0X00; 
	 SysTick->CTRL = 0X01;
 8000be0:	2101      	movs	r1, #1
	 SysTick->VAL  = 0X00; 
 8000be2:	2400      	movs	r4, #0
	 
	 do
	 {
		temp = SysTick->CTRL; 
 8000be4:	461a      	mov	r2, r3
	 SysTick->LOAD = 9*nus; 
 8000be6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000bea:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000bec:	609c      	str	r4, [r3, #8]
	 SysTick->CTRL = 0X01;
 8000bee:	6019      	str	r1, [r3, #0]
		temp = SysTick->CTRL; 
 8000bf0:	6813      	ldr	r3, [r2, #0]
	 }
	 while((temp&0x01) && (!(temp&(1<<16))));
 8000bf2:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d0fa      	beq.n	8000bf0 <delay_us+0x14>
	 
	 SysTick->CTRL = 0x00; 
 8000bfa:	2300      	movs	r3, #0
	 SysTick->VAL  = 0X00; 
}
 8000bfc:	bc10      	pop	{r4}
	 SysTick->CTRL = 0x00; 
 8000bfe:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000c00:	6093      	str	r3, [r2, #8]
}
 8000c02:	4770      	bx	lr
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <delay_ms>:

void delay_ms(uint32_t nms)
{
	 uint32_t temp;
	 
	 SysTick->LOAD = 9000*nms;
 8000c08:	f242 3128 	movw	r1, #9000	; 0x2328
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <delay_ms+0x2c>)
{
 8000c0e:	b430      	push	{r4, r5}
	 SysTick->VAL  = 0X00; 
 8000c10:	2500      	movs	r5, #0
	 SysTick->CTRL = 0X01;
 8000c12:	2401      	movs	r4, #1
	 
	 do
	 {
		temp = SysTick->CTRL; 
 8000c14:	461a      	mov	r2, r3
	 SysTick->LOAD = 9000*nms;
 8000c16:	fb01 f000 	mul.w	r0, r1, r0
 8000c1a:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000c1c:	609d      	str	r5, [r3, #8]
	 SysTick->CTRL = 0X01;
 8000c1e:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL; 
 8000c20:	6813      	ldr	r3, [r2, #0]
	 }
	 while((temp&0x01) && (!(temp&(1<<16)))); 
 8000c22:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d0fa      	beq.n	8000c20 <delay_ms+0x18>
	 
	 SysTick->CTRL = 0x00; 
	 SysTick->VAL  = 0X00; 
}
 8000c2a:	bc30      	pop	{r4, r5}
	 SysTick->CTRL = 0x00; 
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000c30:	6093      	str	r3, [r2, #8]
}
 8000c32:	4770      	bx	lr
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <oled_reset>:

#include "oled.h"

void oled_reset()
{
  OLED_RESET = 0;
 8000c38:	2300      	movs	r3, #0
{
 8000c3a:	b510      	push	{r4, lr}
  OLED_RESET = 0;
 8000c3c:	4c03      	ldr	r4, [pc, #12]	; (8000c4c <oled_reset+0x14>)
  delay_ms(50);
 8000c3e:	2032      	movs	r0, #50	; 0x32
  OLED_RESET = 0;
 8000c40:	6023      	str	r3, [r4, #0]
  delay_ms(50);
 8000c42:	f7ff ffe1 	bl	8000c08 <delay_ms>
  OLED_RESET = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	6023      	str	r3, [r4, #0]
}
 8000c4a:	bd10      	pop	{r4, pc}
 8000c4c:	422181a0 	.word	0x422181a0

08000c50 <oled_send_data>:

void oled_send_data(uint8_t data)
{
 8000c50:	b538      	push	{r3, r4, r5, lr}
  SPI_CS = 0;
 8000c52:	2200      	movs	r2, #0
  OLED_DC = 1;
 8000c54:	2501      	movs	r5, #1
  SPI_CS = 0;
 8000c56:	4c04      	ldr	r4, [pc, #16]	; (8000c68 <oled_send_data+0x18>)
  OLED_DC = 1;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <oled_send_data+0x1c>)
  SPI_CS = 0;
 8000c5a:	6022      	str	r2, [r4, #0]
  OLED_DC = 1;
 8000c5c:	601d      	str	r5, [r3, #0]
  spi_read_write(data);
 8000c5e:	f000 f989 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000c62:	6025      	str	r5, [r4, #0]
}
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	4221818c 	.word	0x4221818c
 8000c6c:	4221819c 	.word	0x4221819c

08000c70 <oled_send_command>:

void oled_send_command(uint8_t command)
{
  SPI_CS = 0;
 8000c70:	2300      	movs	r3, #0
{
 8000c72:	b510      	push	{r4, lr}
  OLED_DC = 0;
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <oled_send_command+0x18>)
  SPI_CS = 0;
 8000c76:	4c05      	ldr	r4, [pc, #20]	; (8000c8c <oled_send_command+0x1c>)
 8000c78:	6023      	str	r3, [r4, #0]
  OLED_DC = 0;
 8000c7a:	6013      	str	r3, [r2, #0]
  spi_read_write(command);
 8000c7c:	f000 f97a 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	6023      	str	r3, [r4, #0]
}
 8000c84:	bd10      	pop	{r4, pc}
 8000c86:	bf00      	nop
 8000c88:	4221819c 	.word	0x4221819c
 8000c8c:	4221818c 	.word	0x4221818c

08000c90 <oled_set_position>:

void oled_set_position(uint8_t x, uint8_t y)
{
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SPI_CS = 0;
 8000c94:	2500      	movs	r5, #0
{
 8000c96:	4606      	mov	r6, r0
  SPI_CS = 1;
 8000c98:	2701      	movs	r7, #1
  SPI_CS = 0;
 8000c9a:	4c0f      	ldr	r4, [pc, #60]	; (8000cd8 <oled_set_position+0x48>)
  OLED_DC = 0;
 8000c9c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8000cdc <oled_set_position+0x4c>
  oled_send_command(0xb0 + y);
 8000ca0:	3950      	subs	r1, #80	; 0x50
  spi_read_write(command);
 8000ca2:	b2c8      	uxtb	r0, r1
  SPI_CS = 0;
 8000ca4:	6025      	str	r5, [r4, #0]
  OLED_DC = 0;
 8000ca6:	f8c8 5000 	str.w	r5, [r8]
  spi_read_write(command);
 8000caa:	f000 f963 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000cae:	6027      	str	r7, [r4, #0]
  spi_read_write(command);
 8000cb0:	f006 000f 	and.w	r0, r6, #15
  SPI_CS = 0;
 8000cb4:	6025      	str	r5, [r4, #0]
  OLED_DC = 0;
 8000cb6:	f8c8 5000 	str.w	r5, [r8]
  spi_read_write(command);
 8000cba:	f000 f95b 	bl	8000f74 <spi_read_write>
  oled_send_command((x & 0x0f) | 0x00);
  oled_send_command(((x & 0xf0) >> 4) | 0x10);
 8000cbe:	0930      	lsrs	r0, r6, #4
  SPI_CS = 1;
 8000cc0:	6027      	str	r7, [r4, #0]
  spi_read_write(command);
 8000cc2:	f040 0010 	orr.w	r0, r0, #16
  SPI_CS = 0;
 8000cc6:	6025      	str	r5, [r4, #0]
  OLED_DC = 0;
 8000cc8:	f8c8 5000 	str.w	r5, [r8]
  spi_read_write(command);
 8000ccc:	f000 f952 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000cd0:	6027      	str	r7, [r4, #0]
}
 8000cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd6:	bf00      	nop
 8000cd8:	4221818c 	.word	0x4221818c
 8000cdc:	4221819c 	.word	0x4221819c

08000ce0 <oled_init>:

void oled_init(void)
{
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OLED_RESET = 0;
 8000ce4:	2400      	movs	r4, #0
  SPI_CS = 1;
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	4d64      	ldr	r5, [pc, #400]	; (8000e7c <oled_init+0x19c>)
  SPI_SCK = 1;
 8000cea:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <oled_init+0x1a0>)
  OLED_RESET = 0;
 8000cec:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000e88 <oled_init+0x1a8>
  OLED_DC = 0;
 8000cf0:	4f64      	ldr	r7, [pc, #400]	; (8000e84 <oled_init+0x1a4>)
  SPI_CS = 1;
 8000cf2:	602e      	str	r6, [r5, #0]
  delay_ms(50);
 8000cf4:	2032      	movs	r0, #50	; 0x32
  SPI_SCK = 1;
 8000cf6:	601e      	str	r6, [r3, #0]
  OLED_RESET = 0;
 8000cf8:	f8c8 4000 	str.w	r4, [r8]
  delay_ms(50);
 8000cfc:	f7ff ff84 	bl	8000c08 <delay_ms>
  OLED_RESET = 1;
 8000d00:	f8c8 6000 	str.w	r6, [r8]
  spi_read_write(command);
 8000d04:	20ae      	movs	r0, #174	; 0xae
  SPI_CS = 0;
 8000d06:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d08:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d0a:	f000 f933 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d0e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d10:	4620      	mov	r0, r4
  SPI_CS = 0;
 8000d12:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d14:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d16:	f000 f92d 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d1a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d1c:	2010      	movs	r0, #16
  SPI_CS = 0;
 8000d1e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d20:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d22:	f000 f927 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d26:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d28:	2040      	movs	r0, #64	; 0x40
  SPI_CS = 0;
 8000d2a:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d2c:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d2e:	f000 f921 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d32:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d34:	2081      	movs	r0, #129	; 0x81
  SPI_CS = 0;
 8000d36:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d38:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d3a:	f000 f91b 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d3e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d40:	4620      	mov	r0, r4
  SPI_CS = 0;
 8000d42:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d44:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d46:	f000 f915 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d4a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d4c:	20a1      	movs	r0, #161	; 0xa1
  SPI_CS = 0;
 8000d4e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d50:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d52:	f000 f90f 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d56:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d58:	20c8      	movs	r0, #200	; 0xc8
  SPI_CS = 0;
 8000d5a:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d5c:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d5e:	f000 f909 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d62:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d64:	20a6      	movs	r0, #166	; 0xa6
  SPI_CS = 0;
 8000d66:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d68:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d6a:	f000 f903 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d6e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d70:	20a8      	movs	r0, #168	; 0xa8
  SPI_CS = 0;
 8000d72:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d74:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d76:	f000 f8fd 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d7a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d7c:	203f      	movs	r0, #63	; 0x3f
  SPI_CS = 0;
 8000d7e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d80:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d82:	f000 f8f7 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d86:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d88:	20d3      	movs	r0, #211	; 0xd3
  SPI_CS = 0;
 8000d8a:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d8c:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d8e:	f000 f8f1 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d92:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000d94:	4620      	mov	r0, r4
  SPI_CS = 0;
 8000d96:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000d98:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000d9a:	f000 f8eb 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000d9e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000da0:	20d5      	movs	r0, #213	; 0xd5
  SPI_CS = 0;
 8000da2:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000da4:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000da6:	f000 f8e5 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000daa:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000dac:	2080      	movs	r0, #128	; 0x80
  SPI_CS = 0;
 8000dae:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000db0:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000db2:	f000 f8df 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000db6:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000db8:	20d9      	movs	r0, #217	; 0xd9
  SPI_CS = 0;
 8000dba:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000dbc:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000dbe:	f000 f8d9 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000dc2:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000dc4:	20f1      	movs	r0, #241	; 0xf1
  SPI_CS = 0;
 8000dc6:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000dc8:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000dca:	f000 f8d3 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000dce:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000dd0:	20da      	movs	r0, #218	; 0xda
  SPI_CS = 0;
 8000dd2:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000dd4:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000dd6:	f000 f8cd 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000dda:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000ddc:	2012      	movs	r0, #18
  SPI_CS = 0;
 8000dde:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000de0:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000de2:	f000 f8c7 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000de6:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000de8:	20db      	movs	r0, #219	; 0xdb
  SPI_CS = 0;
 8000dea:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000dec:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000dee:	f000 f8c1 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000df2:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000df4:	4620      	mov	r0, r4
  SPI_CS = 0;
 8000df6:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000df8:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000dfa:	f000 f8bb 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000dfe:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e00:	2020      	movs	r0, #32
  SPI_CS = 0;
 8000e02:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e04:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e06:	f000 f8b5 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e0a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e0c:	2002      	movs	r0, #2
  SPI_CS = 0;
 8000e0e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e10:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e12:	f000 f8af 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e16:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e18:	208d      	movs	r0, #141	; 0x8d
  SPI_CS = 0;
 8000e1a:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e1c:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e1e:	f000 f8a9 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e22:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e24:	2014      	movs	r0, #20
  SPI_CS = 0;
 8000e26:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e28:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e2a:	f000 f8a3 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e2e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e30:	20a4      	movs	r0, #164	; 0xa4
  SPI_CS = 0;
 8000e32:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e34:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e36:	f000 f89d 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e3a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e3c:	20a6      	movs	r0, #166	; 0xa6
  SPI_CS = 0;
 8000e3e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e40:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e42:	f000 f897 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e46:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e48:	20af      	movs	r0, #175	; 0xaf
  SPI_CS = 0;
 8000e4a:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e4c:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e4e:	f000 f891 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e52:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e54:	20b0      	movs	r0, #176	; 0xb0
  SPI_CS = 0;
 8000e56:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e58:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e5a:	f000 f88b 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e5e:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e60:	4620      	mov	r0, r4
  SPI_CS = 0;
 8000e62:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e64:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e66:	f000 f885 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e6a:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000e6c:	2010      	movs	r0, #16
  SPI_CS = 0;
 8000e6e:	602c      	str	r4, [r5, #0]
  OLED_DC = 0;
 8000e70:	603c      	str	r4, [r7, #0]
  spi_read_write(command);
 8000e72:	f000 f87f 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000e76:	602e      	str	r6, [r5, #0]
  oled_send_command(0x14); // 在显示期间启用电荷泵
  oled_send_command(0xA4); // entire display on
  oled_send_command(0xA6); // set Normal display
  oled_send_command(0xaf); // 开启显示
  oled_set_position(0, 0);
}
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e7c:	4221818c 	.word	0x4221818c
 8000e80:	42218190 	.word	0x42218190
 8000e84:	4221819c 	.word	0x4221819c
 8000e88:	422181a0 	.word	0x422181a0

08000e8c <oled_clear>:

void oled_clear(void)
{
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SPI_CS = 0;
 8000e90:	f04f 0a00 	mov.w	sl, #0
{
 8000e94:	f04f 09b0 	mov.w	r9, #176	; 0xb0
  SPI_CS = 0;
 8000e98:	46d0      	mov	r8, sl
  SPI_CS = 1;
 8000e9a:	2601      	movs	r6, #1
  SPI_CS = 0;
 8000e9c:	4d16      	ldr	r5, [pc, #88]	; (8000ef8 <oled_clear+0x6c>)
  OLED_DC = 0;
 8000e9e:	4f17      	ldr	r7, [pc, #92]	; (8000efc <oled_clear+0x70>)
  SPI_CS = 1;
 8000ea0:	2480      	movs	r4, #128	; 0x80
  SPI_CS = 0;
 8000ea2:	f8c5 8000 	str.w	r8, [r5]
  spi_read_write(command);
 8000ea6:	4648      	mov	r0, r9
  OLED_DC = 0;
 8000ea8:	f8c7 8000 	str.w	r8, [r7]
  spi_read_write(command);
 8000eac:	f000 f862 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000eb0:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000eb2:	2001      	movs	r0, #1
  SPI_CS = 0;
 8000eb4:	f8c5 a000 	str.w	sl, [r5]
  OLED_DC = 0;
 8000eb8:	f8c7 a000 	str.w	sl, [r7]
  spi_read_write(command);
 8000ebc:	f000 f85a 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000ec0:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000ec2:	2010      	movs	r0, #16
  SPI_CS = 0;
 8000ec4:	f8c5 a000 	str.w	sl, [r5]
  OLED_DC = 0;
 8000ec8:	f8c7 a000 	str.w	sl, [r7]
  spi_read_write(command);
 8000ecc:	f000 f852 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000ed0:	602e      	str	r6, [r5, #0]
  SPI_CS = 0;
 8000ed2:	f8c5 8000 	str.w	r8, [r5]
  spi_read_write(data);
 8000ed6:	2000      	movs	r0, #0
  OLED_DC = 1;
 8000ed8:	603e      	str	r6, [r7, #0]
  spi_read_write(data);
 8000eda:	f000 f84b 	bl	8000f74 <spi_read_write>
  for (y = 0; y < 8; y++)
  {
    oled_send_command(0xb0 + y);
    oled_send_command(0x01);
    oled_send_command(0x10);
    for (x = 0; x < OLED_WIDTH; x++)
 8000ede:	3c01      	subs	r4, #1
  SPI_CS = 1;
 8000ee0:	602e      	str	r6, [r5, #0]
    for (x = 0; x < OLED_WIDTH; x++)
 8000ee2:	d1f6      	bne.n	8000ed2 <oled_clear+0x46>
 8000ee4:	f109 0901 	add.w	r9, r9, #1
 8000ee8:	fa5f f989 	uxtb.w	r9, r9
  for (y = 0; y < 8; y++)
 8000eec:	f1b9 0fb8 	cmp.w	r9, #184	; 0xb8
 8000ef0:	d1d6      	bne.n	8000ea0 <oled_clear+0x14>
    {
      oled_send_data(0x00);
    }
  }
}
 8000ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef6:	bf00      	nop
 8000ef8:	4221818c 	.word	0x4221818c
 8000efc:	4221819c 	.word	0x4221819c

08000f00 <oled_full>:

void oled_full(void)
{
 8000f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  SPI_CS = 0;
 8000f04:	f04f 0a00 	mov.w	sl, #0
{
 8000f08:	f04f 09b0 	mov.w	r9, #176	; 0xb0
  SPI_CS = 0;
 8000f0c:	46d0      	mov	r8, sl
  SPI_CS = 1;
 8000f0e:	2601      	movs	r6, #1
  SPI_CS = 0;
 8000f10:	4d16      	ldr	r5, [pc, #88]	; (8000f6c <oled_full+0x6c>)
  OLED_DC = 0;
 8000f12:	4f17      	ldr	r7, [pc, #92]	; (8000f70 <oled_full+0x70>)
  SPI_CS = 1;
 8000f14:	2480      	movs	r4, #128	; 0x80
  SPI_CS = 0;
 8000f16:	f8c5 8000 	str.w	r8, [r5]
  spi_read_write(command);
 8000f1a:	4648      	mov	r0, r9
  OLED_DC = 0;
 8000f1c:	f8c7 8000 	str.w	r8, [r7]
  spi_read_write(command);
 8000f20:	f000 f828 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000f24:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000f26:	2001      	movs	r0, #1
  SPI_CS = 0;
 8000f28:	f8c5 a000 	str.w	sl, [r5]
  OLED_DC = 0;
 8000f2c:	f8c7 a000 	str.w	sl, [r7]
  spi_read_write(command);
 8000f30:	f000 f820 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000f34:	602e      	str	r6, [r5, #0]
  spi_read_write(command);
 8000f36:	2010      	movs	r0, #16
  SPI_CS = 0;
 8000f38:	f8c5 a000 	str.w	sl, [r5]
  OLED_DC = 0;
 8000f3c:	f8c7 a000 	str.w	sl, [r7]
  spi_read_write(command);
 8000f40:	f000 f818 	bl	8000f74 <spi_read_write>
  SPI_CS = 1;
 8000f44:	602e      	str	r6, [r5, #0]
  SPI_CS = 0;
 8000f46:	f8c5 8000 	str.w	r8, [r5]
  spi_read_write(data);
 8000f4a:	20ff      	movs	r0, #255	; 0xff
  OLED_DC = 1;
 8000f4c:	603e      	str	r6, [r7, #0]
  spi_read_write(data);
 8000f4e:	f000 f811 	bl	8000f74 <spi_read_write>
  for (y = 0; y < 8; y++)
  {
    oled_send_command(0xb0 + y);
    oled_send_command(0x01);
    oled_send_command(0x10);
    for (x = 0; x < OLED_WIDTH; x++)
 8000f52:	3c01      	subs	r4, #1
  SPI_CS = 1;
 8000f54:	602e      	str	r6, [r5, #0]
    for (x = 0; x < OLED_WIDTH; x++)
 8000f56:	d1f6      	bne.n	8000f46 <oled_full+0x46>
 8000f58:	f109 0901 	add.w	r9, r9, #1
 8000f5c:	fa5f f989 	uxtb.w	r9, r9
  for (y = 0; y < 8; y++)
 8000f60:	f1b9 0fb8 	cmp.w	r9, #184	; 0xb8
 8000f64:	d1d6      	bne.n	8000f14 <oled_full+0x14>
    {
      oled_send_data(0xFF);
    }
  }
}
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	bf00      	nop
 8000f6c:	4221818c 	.word	0x4221818c
 8000f70:	4221819c 	.word	0x4221819c

08000f74 <spi_read_write>:
  unsigned char i;
  for(i=0; i<8; i++)
  {
    SPI_MOSI = (data << i) & 0x80;
    SPI_SCK = 0;
    SPI_SCK = 1;
 8000f74:	2201      	movs	r2, #1
    SPI_SCK = 0;
 8000f76:	2100      	movs	r1, #0
{
 8000f78:	b4f0      	push	{r4, r5, r6, r7}
    SPI_MOSI = (data << i) & 0x80;
 8000f7a:	4c19      	ldr	r4, [pc, #100]	; (8000fe0 <spi_read_write+0x6c>)
 8000f7c:	f000 0580 	and.w	r5, r0, #128	; 0x80
 8000f80:	6025      	str	r5, [r4, #0]
    SPI_SCK = 0;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <spi_read_write+0x70>)
    SPI_MOSI = (data << i) & 0x80;
 8000f84:	fa00 f702 	lsl.w	r7, r0, r2
 8000f88:	0086      	lsls	r6, r0, #2
 8000f8a:	00c5      	lsls	r5, r0, #3
 8000f8c:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8000f90:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8000f94:	f005 0580 	and.w	r5, r5, #128	; 0x80
    SPI_SCK = 0;
 8000f98:	6019      	str	r1, [r3, #0]
    SPI_SCK = 1;
 8000f9a:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000f9c:	6027      	str	r7, [r4, #0]
    SPI_SCK = 0;
 8000f9e:	6019      	str	r1, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fa0:	0107      	lsls	r7, r0, #4
    SPI_SCK = 1;
 8000fa2:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fa4:	6026      	str	r6, [r4, #0]
    SPI_SCK = 0;
 8000fa6:	6019      	str	r1, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fa8:	0146      	lsls	r6, r0, #5
    SPI_SCK = 1;
 8000faa:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fac:	6025      	str	r5, [r4, #0]
 8000fae:	0185      	lsls	r5, r0, #6
 8000fb0:	01c0      	lsls	r0, r0, #7
 8000fb2:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8000fb6:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8000fba:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8000fbe:	b2c0      	uxtb	r0, r0
    SPI_SCK = 0;
 8000fc0:	6019      	str	r1, [r3, #0]
    SPI_SCK = 1;
 8000fc2:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fc4:	6027      	str	r7, [r4, #0]
    SPI_SCK = 0;
 8000fc6:	6019      	str	r1, [r3, #0]
    SPI_SCK = 1;
 8000fc8:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fca:	6026      	str	r6, [r4, #0]
    SPI_SCK = 0;
 8000fcc:	6019      	str	r1, [r3, #0]
    SPI_SCK = 1;
 8000fce:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fd0:	6025      	str	r5, [r4, #0]
    SPI_SCK = 0;
 8000fd2:	6019      	str	r1, [r3, #0]
    SPI_SCK = 1;
 8000fd4:	601a      	str	r2, [r3, #0]
    SPI_MOSI = (data << i) & 0x80;
 8000fd6:	6020      	str	r0, [r4, #0]
    SPI_SCK = 0;
 8000fd8:	6019      	str	r1, [r3, #0]
  }
}
 8000fda:	bcf0      	pop	{r4, r5, r6, r7}
    SPI_SCK = 1;
 8000fdc:	601a      	str	r2, [r3, #0]
}
 8000fde:	4770      	bx	lr
 8000fe0:	42218194 	.word	0x42218194
 8000fe4:	42218190 	.word	0x42218190

08000fe8 <__libc_init_array>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	4e0d      	ldr	r6, [pc, #52]	; (8001020 <__libc_init_array+0x38>)
 8000fec:	4d0d      	ldr	r5, [pc, #52]	; (8001024 <__libc_init_array+0x3c>)
 8000fee:	1b76      	subs	r6, r6, r5
 8000ff0:	10b6      	asrs	r6, r6, #2
 8000ff2:	d006      	beq.n	8001002 <__libc_init_array+0x1a>
 8000ff4:	2400      	movs	r4, #0
 8000ff6:	3401      	adds	r4, #1
 8000ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffc:	4798      	blx	r3
 8000ffe:	42a6      	cmp	r6, r4
 8001000:	d1f9      	bne.n	8000ff6 <__libc_init_array+0xe>
 8001002:	4e09      	ldr	r6, [pc, #36]	; (8001028 <__libc_init_array+0x40>)
 8001004:	4d09      	ldr	r5, [pc, #36]	; (800102c <__libc_init_array+0x44>)
 8001006:	f000 f8c7 	bl	8001198 <_init>
 800100a:	1b76      	subs	r6, r6, r5
 800100c:	10b6      	asrs	r6, r6, #2
 800100e:	d006      	beq.n	800101e <__libc_init_array+0x36>
 8001010:	2400      	movs	r4, #0
 8001012:	3401      	adds	r4, #1
 8001014:	f855 3b04 	ldr.w	r3, [r5], #4
 8001018:	4798      	blx	r3
 800101a:	42a6      	cmp	r6, r4
 800101c:	d1f9      	bne.n	8001012 <__libc_init_array+0x2a>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	080011b4 	.word	0x080011b4
 8001024:	080011b4 	.word	0x080011b4
 8001028:	080011bc 	.word	0x080011bc
 800102c:	080011b4 	.word	0x080011b4

08001030 <register_fini>:
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <register_fini+0xc>)
 8001032:	b113      	cbz	r3, 800103a <register_fini+0xa>
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <register_fini+0x10>)
 8001036:	f000 b805 	b.w	8001044 <atexit>
 800103a:	4770      	bx	lr
 800103c:	00000000 	.word	0x00000000
 8001040:	08001051 	.word	0x08001051

08001044 <atexit>:
 8001044:	2300      	movs	r3, #0
 8001046:	4601      	mov	r1, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 b81e 	b.w	800108c <__register_exitproc>

08001050 <__libc_fini_array>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4c0a      	ldr	r4, [pc, #40]	; (800107c <__libc_fini_array+0x2c>)
 8001054:	4d0a      	ldr	r5, [pc, #40]	; (8001080 <__libc_fini_array+0x30>)
 8001056:	1b64      	subs	r4, r4, r5
 8001058:	10a4      	asrs	r4, r4, #2
 800105a:	d00a      	beq.n	8001072 <__libc_fini_array+0x22>
 800105c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8001060:	3b01      	subs	r3, #1
 8001062:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001066:	3c01      	subs	r4, #1
 8001068:	f855 3904 	ldr.w	r3, [r5], #-4
 800106c:	4798      	blx	r3
 800106e:	2c00      	cmp	r4, #0
 8001070:	d1f9      	bne.n	8001066 <__libc_fini_array+0x16>
 8001072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001076:	f000 b895 	b.w	80011a4 <_fini>
 800107a:	bf00      	nop
 800107c:	080011c0 	.word	0x080011c0
 8001080:	080011bc 	.word	0x080011bc

08001084 <__retarget_lock_acquire_recursive>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__retarget_lock_release_recursive>:
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__register_exitproc>:
 800108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001090:	4d2b      	ldr	r5, [pc, #172]	; (8001140 <__register_exitproc+0xb4>)
 8001092:	4606      	mov	r6, r0
 8001094:	6828      	ldr	r0, [r5, #0]
 8001096:	4698      	mov	r8, r3
 8001098:	460f      	mov	r7, r1
 800109a:	4691      	mov	r9, r2
 800109c:	f7ff fff2 	bl	8001084 <__retarget_lock_acquire_recursive>
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <__register_exitproc+0xb8>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d03d      	beq.n	8001128 <__register_exitproc+0x9c>
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2a1f      	cmp	r2, #31
 80010b0:	dc0d      	bgt.n	80010ce <__register_exitproc+0x42>
 80010b2:	f102 0c01 	add.w	ip, r2, #1
 80010b6:	bb16      	cbnz	r6, 80010fe <__register_exitproc+0x72>
 80010b8:	3202      	adds	r2, #2
 80010ba:	f8c3 c004 	str.w	ip, [r3, #4]
 80010be:	6828      	ldr	r0, [r5, #0]
 80010c0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 80010c4:	f7ff ffe0 	bl	8001088 <__retarget_lock_release_recursive>
 80010c8:	2000      	movs	r0, #0
 80010ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <__register_exitproc+0xbc>)
 80010d0:	b37b      	cbz	r3, 8001132 <__register_exitproc+0xa6>
 80010d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010d6:	f3af 8000 	nop.w
 80010da:	4603      	mov	r3, r0
 80010dc:	b348      	cbz	r0, 8001132 <__register_exitproc+0xa6>
 80010de:	2000      	movs	r0, #0
 80010e0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80010e4:	f04f 0c01 	mov.w	ip, #1
 80010e8:	e9c3 1000 	strd	r1, r0, [r3]
 80010ec:	4602      	mov	r2, r0
 80010ee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80010f2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80010f6:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d0dc      	beq.n	80010b8 <__register_exitproc+0x2c>
 80010fe:	2101      	movs	r1, #1
 8001100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8001104:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8001108:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 800110c:	4091      	lsls	r1, r2
 800110e:	4308      	orrs	r0, r1
 8001110:	2e02      	cmp	r6, #2
 8001112:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8001116:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 800111a:	d1cd      	bne.n	80010b8 <__register_exitproc+0x2c>
 800111c:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 8001120:	4301      	orrs	r1, r0
 8001122:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8001126:	e7c7      	b.n	80010b8 <__register_exitproc+0x2c>
 8001128:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 800112c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8001130:	e7bc      	b.n	80010ac <__register_exitproc+0x20>
 8001132:	6828      	ldr	r0, [r5, #0]
 8001134:	f7ff ffa8 	bl	8001088 <__retarget_lock_release_recursive>
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113c:	e7c5      	b.n	80010ca <__register_exitproc+0x3e>
 800113e:	bf00      	nop
 8001140:	20000450 	.word	0x20000450
 8001144:	080011b0 	.word	0x080011b0
 8001148:	00000000 	.word	0x00000000

0800114c <Reset_Handler>:
 800114c:	2100      	movs	r1, #0
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <LoopFillZerobss+0x14>)
 8001152:	585b      	ldr	r3, [r3, r1]
 8001154:	5043      	str	r3, [r0, r1]
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <LoopFillZerobss+0x18>)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <LoopFillZerobss+0x1c>)
 800115c:	1842      	adds	r2, r0, r1
 800115e:	429a      	cmp	r2, r3
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x20>)
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
 8001166:	2300      	movs	r3, #0
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LoopFillZerobss+0x24>)
 800116e:	429a      	cmp	r2, r3
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>
 8001172:	f7ff f843 	bl	80001fc <SystemInit>
 8001176:	f7ff ff37 	bl	8000fe8 <__libc_init_array>
 800117a:	f7ff f819 	bl	80001b0 <main>
 800117e:	4770      	bx	lr
 8001180:	080011c0 	.word	0x080011c0
 8001184:	20000000 	.word	0x20000000
 8001188:	20000454 	.word	0x20000454
 800118c:	20000454 	.word	0x20000454
 8001190:	20000494 	.word	0x20000494

08001194 <ADC1_2_IRQHandler>:
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>
	...

08001198 <_init>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	bf00      	nop
 800119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119e:	bc08      	pop	{r3}
 80011a0:	469e      	mov	lr, r3
 80011a2:	4770      	bx	lr

080011a4 <_fini>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	bf00      	nop
 80011a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011aa:	bc08      	pop	{r3}
 80011ac:	469e      	mov	lr, r3
 80011ae:	4770      	bx	lr
