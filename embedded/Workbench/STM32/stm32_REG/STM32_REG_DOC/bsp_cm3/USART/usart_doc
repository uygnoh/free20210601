###########################################################
### % usart通用异步同步收发器
###########################################################
/* % usart基本配置 */
USART1->CR1 |= (1<<13);     /* “UE”位使能 */
USART1->CR1 &= ~(1<<12);    /* “M”位定义字长 */
USART1->CR2 &= ~(3<<12);	/* USART1->CR2  &= ~((1<<12) | (1<<13));“1”个停止位 */
USART1->CR1 |= (1<<3);      /* “TE”位使能 */



/* % 分数波特率的产生
接收器和发送器(Rx和Tx)的波特率在 USARTDIV的整数和小数寄存器中的值应设置相同
            Tx或Rx 波特率 = ƒck/(16*USARTDIV)
1 ƒck是USART的时钟
2 USARTDIV是一个无符号的定点数，这“12”位的值设置在USART_BRR寄存器中
3 DIV_Mantisa整数部分; DIV_Fraction小部分  
4 波特率设置为9600bps; 外设时钟频率为72MHz
5 9600 = 72*1000*1000/(16*USARTDIV)
6 USARTDIV = 72000000/(9600*16) = 468.75;
7 DIV_M = 468; DIV_F = 0.75*16  = 12;
*/
float DIV;
uint16_t DIV_M, DIV_F, BRR;
uint32_t BOUND;
BOUND   = 9600;                                 /* 波特率设置 */
DIV     = (float)(72*1000*1000)/(BOUND*16);     /* 无符号的定点数 */
DIV_M   = DIV;	                                /* 取整数部分 */
DIV_F   = (DIV - DIV_M)*16;                     /* 取小数部分 */
BRR     = DIV_M<<4 + DIV_F;                     /* 整合整数部分和小数部分 */
USART1->BRR = BRR;                              /* 将整合后的数值放入BRR寄存器中 */



/* 发送一个字符 'A' 到 USART的DR寄存器 */
	int i, data,;
	data = 'A';
	USART1->DR = data;
	for (i = 0; i < 30; i++) 
	{
		data++;
		while ((USART1->SR & (1<<6) == 0);
	}
	
	
	
	
############################################################
### % usart通信过程
############################################################
/* % 数据发送过程 */
	1. 设置 USART_CR1寄存器中 UE位置位 来激活USART
	2. 设置 USART_CR1寄存器中 的M位    来定义字长
	3. 设置 USART_CR2寄存器中 编写停止位位数
	*  如果采用多缓冲器通信，配置 USART_CR3寄存器中的 DMA使能位(DMAT)
	4. 设置 USART_CR1中的 TE位，发送一个空闲帧作为第一次数据的发送
	5. 设置 USART_BRR寄存器，设定要求的波特率
	6. 把发送的数据写进 USART_DR寄存器 (此动作自动清除 TXE位)。
	   -----在只有一个缓冲器的情况下，对每个待发送的数据重复此步骤
/* % 数据接收过程 */
	1. 设置 USART_CR1寄存器中 UE位置位 来激活USART
	2. 设置 USART_CR1寄存器中 的M位    来定义字长
	3. 设置 USART_CR2寄存器中 编写停止位位数
	*  如果采用多缓冲器通信，配置 USART_CR3寄存器中的 DMA使能位(DMAT)
	4. 设置 USART_BRR寄存器，设定要求的波特率
	5. 设置 USART_CR1中的 RE位，激活接收器，使他开始寻找起始位
/* % 当一个字符被接收时 */
	RXNE位被置位。它表明移位寄存器的内容被转移到 RDR.
	RXNEIE位被置位。则产生中断信号.
	在接收期间如果检测到帧错误，噪音或溢出错误，错误标志将被置起.



############################################################
### % /* usart寄存器 */
############################################################
USART_SR	        % 状态寄存器
USART_DR	        % 数据寄存器
USART_BRR	        % 波特率寄存器
USART_CR1	        % 控制寄存器 1
USART_CR2	        % 控制寄存器 2
USART_CR3	        % 控制寄存器 3



