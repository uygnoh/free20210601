
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	0800060c 	.word	0x0800060c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	0800060c 	.word	0x0800060c

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800014e:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8000150:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000154:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000156:	493b      	ldr	r1, [pc, #236]	; (8000244 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8000158:	6818      	ldr	r0, [r3, #0]
{
 800015a:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 800015c:	f040 0001 	orr.w	r0, r0, #1
 8000160:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000162:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000164:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000166:	4001      	ands	r1, r0
 8000168:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800016a:	6819      	ldr	r1, [r3, #0]
 800016c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000170:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000174:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000176:	6819      	ldr	r1, [r3, #0]
 8000178:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800017c:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800017e:	6859      	ldr	r1, [r3, #4]
 8000180:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000184:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8000186:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000188:	9400      	str	r4, [sp, #0]
 800018a:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800018c:	6819      	ldr	r1, [r3, #0]
 800018e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000192:	6019      	str	r1, [r3, #0]
 8000194:	e003      	b.n	800019e <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000196:	9b00      	ldr	r3, [sp, #0]
 8000198:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800019c:	d009      	beq.n	80001b2 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001a4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80001a6:	9b00      	ldr	r3, [sp, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ac:	9b01      	ldr	r3, [sp, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f1      	beq.n	8000196 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b2:	4b23      	ldr	r3, [pc, #140]	; (8000240 <SystemInit+0xf4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80001ba:	bf18      	it	ne
 80001bc:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c0:	9b01      	ldr	r3, [sp, #4]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d006      	beq.n	80001d4 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ca:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <SystemInit+0xfc>)
 80001cc:	609a      	str	r2, [r3, #8]
}
 80001ce:	b002      	add	sp, #8
 80001d0:	bc30      	pop	{r4, r5}
 80001d2:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d4:	491d      	ldr	r1, [pc, #116]	; (800024c <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001d6:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d8:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80001da:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001dc:	f040 0010 	orr.w	r0, r0, #16
 80001e0:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001e2:	6808      	ldr	r0, [r1, #0]
 80001e4:	f020 0003 	bic.w	r0, r0, #3
 80001e8:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001ea:	6808      	ldr	r0, [r1, #0]
 80001ec:	f040 0002 	orr.w	r0, r0, #2
 80001f0:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001f2:	6859      	ldr	r1, [r3, #4]
 80001f4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f6:	6859      	ldr	r1, [r3, #4]
 80001f8:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fa:	6859      	ldr	r1, [r3, #4]
 80001fc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000200:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000202:	6859      	ldr	r1, [r3, #4]
 8000204:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000208:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800020a:	6859      	ldr	r1, [r3, #4]
 800020c:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000210:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000218:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	019b      	lsls	r3, r3, #6
 800021e:	d5fc      	bpl.n	800021a <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000220:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000222:	4907      	ldr	r1, [pc, #28]	; (8000240 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000224:	f023 0303 	bic.w	r3, r3, #3
 8000228:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800022a:	6853      	ldr	r3, [r2, #4]
 800022c:	f043 0302 	orr.w	r3, r3, #2
 8000230:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000232:	684b      	ldr	r3, [r1, #4]
 8000234:	f003 030c 	and.w	r3, r3, #12
 8000238:	2b08      	cmp	r3, #8
 800023a:	d1fa      	bne.n	8000232 <SystemInit+0xe6>
 800023c:	e7c3      	b.n	80001c6 <SystemInit+0x7a>
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	f8ff0000 	.word	0xf8ff0000
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40022000 	.word	0x40022000

08000250 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <SystemCoreClockUpdate+0x48>)
 8000252:	6853      	ldr	r3, [r2, #4]
 8000254:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000258:	2b08      	cmp	r3, #8
 800025a:	d10e      	bne.n	800027a <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800025c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800025e:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000260:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000264:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000266:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 800026a:	d510      	bpl.n	800028e <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800026c:	6852      	ldr	r2, [r2, #4]
 800026e:	0392      	lsls	r2, r2, #14
 8000270:	d40d      	bmi.n	800028e <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SystemCoreClockUpdate+0x4c>)
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	e000      	b.n	800027c <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SystemCoreClockUpdate+0x48>)
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <SystemCoreClockUpdate+0x50>)
 8000280:	6852      	ldr	r2, [r2, #4]
 8000282:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000286:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 8000288:	40d3      	lsrs	r3, r2
 800028a:	610b      	str	r3, [r1, #16]
}
 800028c:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <SystemCoreClockUpdate+0x54>)
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	e7f2      	b.n	800027c <SystemCoreClockUpdate+0x2c>
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	007a1200 	.word	0x007a1200
 80002a0:	20000000 	.word	0x20000000
 80002a4:	003d0900 	.word	0x003d0900

080002a8 <gpio_init>:
#include "ysh_gpio.h"

void gpio_init(void)
{
    /* GPIO_PC13(通用推完输出，50MHz) */
    GPIOC->CRH = (uint32_t)0x00300000;
 80002a8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <gpio_init+0xc>)
 80002ae:	605a      	str	r2, [r3, #4]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40011000 	.word	0x40011000

080002b8 <gpio_led_test>:


void gpio_led_test(void)
{
    /* 端口位设置/清除寄存器(GPIOx_BSRR) */
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BR13;
 80002b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 80002bc:	b510      	push	{r4, lr}
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BR13;
 80002be:	4c07      	ldr	r4, [pc, #28]	; (80002dc <gpio_led_test+0x24>)
    delay_ms(500);
 80002c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BR13;
 80002c4:	6123      	str	r3, [r4, #16]
    delay_ms(500);
 80002c6:	f000 f8a9 	bl	800041c <delay_ms>
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BS13;
 80002ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    delay_ms(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BS13;
 80002d2:	6123      	str	r3, [r4, #16]
 80002d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(500);
 80002d8:	f000 b8a0 	b.w	800041c <delay_ms>
 80002dc:	40011000 	.word	0x40011000

080002e0 <rcc_init>:
{
    /* 开启“AFIO”时钟(辅助功能IO时钟使能) */
    //RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_AFIOEN;

    /* 开启“GPIOC”时钟 */
    RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_IOPCEN;
 80002e0:	4a02      	ldr	r2, [pc, #8]	; (80002ec <rcc_init+0xc>)
 80002e2:	6993      	ldr	r3, [r2, #24]
 80002e4:	f043 0310 	orr.w	r3, r3, #16
 80002e8:	6193      	str	r3, [r2, #24]

    /* 开启“通用定时器2”时钟 */
    //RCC->APB1ENR |= (uint32_t)RCC_APB1ENR_TIM2EN;
}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <rcc_default>:

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    RCC->CFGR &= (uint32_t)0xFF80FFFF;
    
    /* Disable all interrupts and clear pending bits  */
    RCC->CIR = 0x009F0000;
 80002f0:	f44f 001f 	mov.w	r0, #10420224	; 0x9f0000
    RCC->CR |= (uint32_t)0x00000001;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <rcc_default+0x38>)
    RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <rcc_default+0x3c>)
    RCC->CR |= (uint32_t)0x00000001;
 80002f8:	6819      	ldr	r1, [r3, #0]
 80002fa:	f041 0101 	orr.w	r1, r1, #1
 80002fe:	6019      	str	r1, [r3, #0]
    RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000300:	6859      	ldr	r1, [r3, #4]
 8000302:	400a      	ands	r2, r1
 8000304:	605a      	str	r2, [r3, #4]
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800030c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000310:	601a      	str	r2, [r3, #0]
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000318:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800031a:	685a      	ldr	r2, [r3, #4]
 800031c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000320:	605a      	str	r2, [r3, #4]
    RCC->CIR = 0x009F0000;
 8000322:	6098      	str	r0, [r3, #8]
}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	f8ff0000 	.word	0xf8ff0000

08000330 <set_clock_72>:



void set_clock_72(void)
{
    __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000330:	2100      	movs	r1, #0


    /* Enable HSE */    
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <set_clock_72+0xb8>)
{
 8000334:	b082      	sub	sp, #8
    __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000336:	9100      	str	r1, [sp, #0]
 8000338:	9101      	str	r1, [sp, #4]
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800033a:	6819      	ldr	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800033c:	461a      	mov	r2, r3
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800033e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000342:	6019      	str	r1, [r3, #0]
 8000344:	e003      	b.n	800034e <set_clock_72+0x1e>
        StartUpCounter++;  
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000346:	9b00      	ldr	r3, [sp, #0]
 8000348:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800034c:	d009      	beq.n	8000362 <set_clock_72+0x32>
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800034e:	6813      	ldr	r3, [r2, #0]
 8000350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000354:	9301      	str	r3, [sp, #4]
        StartUpCounter++;  
 8000356:	9b00      	ldr	r3, [sp, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	9300      	str	r3, [sp, #0]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800035c:	9b01      	ldr	r3, [sp, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f1      	beq.n	8000346 <set_clock_72+0x16>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <set_clock_72+0xb8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
    {
        HSEStatus = (uint32_t)0x01;
 800036a:	bf18      	it	ne
 800036c:	2301      	movne	r3, #1
    }
    else
    {
        HSEStatus = (uint32_t)0x00;
 800036e:	9301      	str	r3, [sp, #4]
    }  


    if (HSEStatus == (uint32_t)0x01)
 8000370:	9b01      	ldr	r3, [sp, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d001      	beq.n	800037a <set_clock_72+0x4a>
    }
    else
    { /* If HSE fails to start-up, the application will have wrong clock 
             configuration. User can add here some code to deal with this error */
    }
}
 8000376:	b002      	add	sp, #8
 8000378:	4770      	bx	lr
        FLASH->ACR |= FLASH_ACR_PRFTBE;
 800037a:	491c      	ldr	r1, [pc, #112]	; (80003ec <set_clock_72+0xbc>)
        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <set_clock_72+0xb8>)
        FLASH->ACR |= FLASH_ACR_PRFTBE;
 800037e:	6808      	ldr	r0, [r1, #0]
        while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000380:	461a      	mov	r2, r3
        FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000382:	f040 0010 	orr.w	r0, r0, #16
 8000386:	6008      	str	r0, [r1, #0]
        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000388:	6808      	ldr	r0, [r1, #0]
 800038a:	f020 0003 	bic.w	r0, r0, #3
 800038e:	6008      	str	r0, [r1, #0]
        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000390:	6808      	ldr	r0, [r1, #0]
 8000392:	f040 0002 	orr.w	r0, r0, #2
 8000396:	6008      	str	r0, [r1, #0]
        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000398:	6859      	ldr	r1, [r3, #4]
 800039a:	6059      	str	r1, [r3, #4]
        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800039c:	6859      	ldr	r1, [r3, #4]
 800039e:	6059      	str	r1, [r3, #4]
        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80003a0:	6859      	ldr	r1, [r3, #4]
 80003a2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80003a6:	6059      	str	r1, [r3, #4]
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80003a8:	6859      	ldr	r1, [r3, #4]
 80003aa:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80003ae:	6059      	str	r1, [r3, #4]
        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80003b0:	6859      	ldr	r1, [r3, #4]
 80003b2:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80003b6:	6059      	str	r1, [r3, #4]
        RCC->CR |= RCC_CR_PLLON;
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80003be:	6019      	str	r1, [r3, #0]
        while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003c0:	6813      	ldr	r3, [r2, #0]
 80003c2:	019b      	lsls	r3, r3, #6
 80003c4:	d5fc      	bpl.n	80003c0 <set_clock_72+0x90>
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003c6:	6853      	ldr	r3, [r2, #4]
        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003c8:	4907      	ldr	r1, [pc, #28]	; (80003e8 <set_clock_72+0xb8>)
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003ca:	f023 0303 	bic.w	r3, r3, #3
 80003ce:	6053      	str	r3, [r2, #4]
        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003d0:	6853      	ldr	r3, [r2, #4]
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6053      	str	r3, [r2, #4]
        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003d8:	684b      	ldr	r3, [r1, #4]
 80003da:	f003 030c 	and.w	r3, r3, #12
 80003de:	2b08      	cmp	r3, #8
 80003e0:	d1fa      	bne.n	80003d8 <set_clock_72+0xa8>
}
 80003e2:	b002      	add	sp, #8
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40022000 	.word	0x40022000

080003f0 <delay_us>:
#include "ysh_common.h"

void delay_us(u32 nus)
{
	 u32 temp;
	 SysTick->LOAD = 9*nus; 
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <delay_us+0x28>)
{
 80003f2:	b410      	push	{r4}
	 SysTick->VAL  = 0X00; 
	 SysTick->CTRL = 0X01; 
 80003f4:	2101      	movs	r1, #1
	 SysTick->VAL  = 0X00; 
 80003f6:	2400      	movs	r4, #0
	 do
	 {
		temp = SysTick->CTRL; 
 80003f8:	461a      	mov	r2, r3
	 SysTick->LOAD = 9*nus; 
 80003fa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80003fe:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000400:	609c      	str	r4, [r3, #8]
	 SysTick->CTRL = 0X01; 
 8000402:	6019      	str	r1, [r3, #0]
		temp = SysTick->CTRL; 
 8000404:	6813      	ldr	r3, [r2, #0]
	 }
	 while ((temp&0x01) && (!(temp&(1<<16))));
 8000406:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800040a:	2b01      	cmp	r3, #1
 800040c:	d0fa      	beq.n	8000404 <delay_us+0x14>
	 
	 SysTick->CTRL = 0x00; 
 800040e:	2300      	movs	r3, #0
	 SysTick->VAL  = 0X00; 
}
 8000410:	bc10      	pop	{r4}
	 SysTick->CTRL = 0x00; 
 8000412:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000414:	6093      	str	r3, [r2, #8]
}
 8000416:	4770      	bx	lr
 8000418:	e000e010 	.word	0xe000e010

0800041c <delay_ms>:


void delay_ms(u32 nms)
{
	 u32 temp;
	 SysTick->LOAD = 9000*nms;
 800041c:	f242 3128 	movw	r1, #9000	; 0x2328
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <delay_ms+0x2c>)
{
 8000422:	b430      	push	{r4, r5}
	 SysTick->VAL  = 0X00; 
 8000424:	2500      	movs	r5, #0
	 SysTick->CTRL = 0X01; 
 8000426:	2401      	movs	r4, #1
	 do
	 {
		temp = SysTick->CTRL; 
 8000428:	461a      	mov	r2, r3
	 SysTick->LOAD = 9000*nms;
 800042a:	fb01 f000 	mul.w	r0, r1, r0
 800042e:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000430:	609d      	str	r5, [r3, #8]
	 SysTick->CTRL = 0X01; 
 8000432:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL; 
 8000434:	6813      	ldr	r3, [r2, #0]
	 }
	 while ((temp&0x01) && (!(temp&(1<<16)))); 
 8000436:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800043a:	2b01      	cmp	r3, #1
 800043c:	d0fa      	beq.n	8000434 <delay_ms+0x18>
	 
	 SysTick->CTRL = 0x00; 
	 SysTick->VAL  = 0X00; 
}
 800043e:	bc30      	pop	{r4, r5}
	 SysTick->CTRL = 0x00; 
 8000440:	2300      	movs	r3, #0
 8000442:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000444:	6093      	str	r3, [r2, #8]
}
 8000446:	4770      	bx	lr
 8000448:	e000e010 	.word	0xe000e010

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4e0d      	ldr	r6, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1b76      	subs	r6, r6, r5
 8000454:	10b6      	asrs	r6, r6, #2
 8000456:	d006      	beq.n	8000466 <__libc_init_array+0x1a>
 8000458:	2400      	movs	r4, #0
 800045a:	3401      	adds	r4, #1
 800045c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000460:	4798      	blx	r3
 8000462:	42a6      	cmp	r6, r4
 8000464:	d1f9      	bne.n	800045a <__libc_init_array+0xe>
 8000466:	4e09      	ldr	r6, [pc, #36]	; (800048c <__libc_init_array+0x40>)
 8000468:	4d09      	ldr	r5, [pc, #36]	; (8000490 <__libc_init_array+0x44>)
 800046a:	f000 f8cf 	bl	800060c <_init>
 800046e:	1b76      	subs	r6, r6, r5
 8000470:	10b6      	asrs	r6, r6, #2
 8000472:	d006      	beq.n	8000482 <__libc_init_array+0x36>
 8000474:	2400      	movs	r4, #0
 8000476:	3401      	adds	r4, #1
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	42a6      	cmp	r6, r4
 8000480:	d1f9      	bne.n	8000476 <__libc_init_array+0x2a>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	08000628 	.word	0x08000628
 8000488:	08000628 	.word	0x08000628
 800048c:	08000630 	.word	0x08000630
 8000490:	08000628 	.word	0x08000628

08000494 <register_fini>:
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <register_fini+0xc>)
 8000496:	b113      	cbz	r3, 800049e <register_fini+0xa>
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <register_fini+0x10>)
 800049a:	f000 b805 	b.w	80004a8 <atexit>
 800049e:	4770      	bx	lr
 80004a0:	00000000 	.word	0x00000000
 80004a4:	080004b5 	.word	0x080004b5

080004a8 <atexit>:
 80004a8:	2300      	movs	r3, #0
 80004aa:	4601      	mov	r1, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 b81e 	b.w	80004f0 <__register_exitproc>

080004b4 <__libc_fini_array>:
 80004b4:	b538      	push	{r3, r4, r5, lr}
 80004b6:	4c0a      	ldr	r4, [pc, #40]	; (80004e0 <__libc_fini_array+0x2c>)
 80004b8:	4d0a      	ldr	r5, [pc, #40]	; (80004e4 <__libc_fini_array+0x30>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	d00a      	beq.n	80004d6 <__libc_fini_array+0x22>
 80004c0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80004c4:	3b01      	subs	r3, #1
 80004c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80004ca:	3c01      	subs	r4, #1
 80004cc:	f855 3904 	ldr.w	r3, [r5], #-4
 80004d0:	4798      	blx	r3
 80004d2:	2c00      	cmp	r4, #0
 80004d4:	d1f9      	bne.n	80004ca <__libc_fini_array+0x16>
 80004d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80004da:	f000 b89d 	b.w	8000618 <_fini>
 80004de:	bf00      	nop
 80004e0:	08000634 	.word	0x08000634
 80004e4:	08000630 	.word	0x08000630

080004e8 <__retarget_lock_acquire_recursive>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <__retarget_lock_release_recursive>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <__register_exitproc>:
 80004f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f4:	4d2b      	ldr	r5, [pc, #172]	; (80005a4 <__register_exitproc+0xb4>)
 80004f6:	4606      	mov	r6, r0
 80004f8:	6828      	ldr	r0, [r5, #0]
 80004fa:	4698      	mov	r8, r3
 80004fc:	460f      	mov	r7, r1
 80004fe:	4691      	mov	r9, r2
 8000500:	f7ff fff2 	bl	80004e8 <__retarget_lock_acquire_recursive>
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <__register_exitproc+0xb8>)
 8000506:	681c      	ldr	r4, [r3, #0]
 8000508:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800050c:	2b00      	cmp	r3, #0
 800050e:	d03d      	beq.n	800058c <__register_exitproc+0x9c>
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	2a1f      	cmp	r2, #31
 8000514:	dc0d      	bgt.n	8000532 <__register_exitproc+0x42>
 8000516:	f102 0c01 	add.w	ip, r2, #1
 800051a:	bb16      	cbnz	r6, 8000562 <__register_exitproc+0x72>
 800051c:	3202      	adds	r2, #2
 800051e:	f8c3 c004 	str.w	ip, [r3, #4]
 8000522:	6828      	ldr	r0, [r5, #0]
 8000524:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8000528:	f7ff ffe0 	bl	80004ec <__retarget_lock_release_recursive>
 800052c:	2000      	movs	r0, #0
 800052e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <__register_exitproc+0xbc>)
 8000534:	b37b      	cbz	r3, 8000596 <__register_exitproc+0xa6>
 8000536:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800053a:	f3af 8000 	nop.w
 800053e:	4603      	mov	r3, r0
 8000540:	b348      	cbz	r0, 8000596 <__register_exitproc+0xa6>
 8000542:	2000      	movs	r0, #0
 8000544:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e9c3 1000 	strd	r1, r0, [r3]
 8000550:	4602      	mov	r2, r0
 8000552:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8000556:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 800055a:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 800055e:	2e00      	cmp	r6, #0
 8000560:	d0dc      	beq.n	800051c <__register_exitproc+0x2c>
 8000562:	2101      	movs	r1, #1
 8000564:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8000568:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 800056c:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8000570:	4091      	lsls	r1, r2
 8000572:	4308      	orrs	r0, r1
 8000574:	2e02      	cmp	r6, #2
 8000576:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 800057a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 800057e:	d1cd      	bne.n	800051c <__register_exitproc+0x2c>
 8000580:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 8000584:	4301      	orrs	r1, r0
 8000586:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 800058a:	e7c7      	b.n	800051c <__register_exitproc+0x2c>
 800058c:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8000590:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8000594:	e7bc      	b.n	8000510 <__register_exitproc+0x20>
 8000596:	6828      	ldr	r0, [r5, #0]
 8000598:	f7ff ffa8 	bl	80004ec <__retarget_lock_release_recursive>
 800059c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a0:	e7c5      	b.n	800052e <__register_exitproc+0x3e>
 80005a2:	bf00      	nop
 80005a4:	20000440 	.word	0x20000440
 80005a8:	08000624 	.word	0x08000624
 80005ac:	00000000 	.word	0x00000000

080005b0 <Reset_Handler>:
 80005b0:	2100      	movs	r1, #0
 80005b2:	e003      	b.n	80005bc <LoopCopyDataInit>

080005b4 <CopyDataInit>:
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <LoopFillZerobss+0x14>)
 80005b6:	585b      	ldr	r3, [r3, r1]
 80005b8:	5043      	str	r3, [r0, r1]
 80005ba:	3104      	adds	r1, #4

080005bc <LoopCopyDataInit>:
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <LoopFillZerobss+0x18>)
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LoopFillZerobss+0x1c>)
 80005c0:	1842      	adds	r2, r0, r1
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d3f6      	bcc.n	80005b4 <CopyDataInit>
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopFillZerobss+0x20>)
 80005c8:	e002      	b.n	80005d0 <LoopFillZerobss>

080005ca <FillZerobss>:
 80005ca:	2300      	movs	r3, #0
 80005cc:	f842 3b04 	str.w	r3, [r2], #4

080005d0 <LoopFillZerobss>:
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <LoopFillZerobss+0x24>)
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d3f9      	bcc.n	80005ca <FillZerobss>
 80005d6:	f7ff fdb9 	bl	800014c <SystemInit>
 80005da:	f7ff ff37 	bl	800044c <__libc_init_array>
 80005de:	f000 f80d 	bl	80005fc <main>
 80005e2:	4770      	bx	lr
 80005e4:	08000634 	.word	0x08000634
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000444 	.word	0x20000444
 80005f0:	20000444 	.word	0x20000444
 80005f4:	20000484 	.word	0x20000484

080005f8 <ADC1_2_IRQHandler>:
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <main>:
#include "stm32f10x.h"

int main(void)
{
 80005fc:	b508      	push	{r3, lr}
    rcc_init();
 80005fe:	f7ff fe6f 	bl	80002e0 <rcc_init>
    gpio_init();
 8000602:	f7ff fe51 	bl	80002a8 <gpio_init>

    while (1)
    {
        gpio_led_test();
 8000606:	f7ff fe57 	bl	80002b8 <gpio_led_test>
 800060a:	e7fc      	b.n	8000606 <main+0xa>

0800060c <_init>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr

08000618 <_fini>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr
