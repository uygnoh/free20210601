
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	080007c4 	.word	0x080007c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	080007c4 	.word	0x080007c4

0800014c <main>:
#include "stm32f10x.h"

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    rcc_init();
 8000150:	f000 f94e 	bl	80003f0 <rcc_init>
    gpio_init();
 8000154:	f000 f92a 	bl	80003ac <gpio_init>

    while (1)
    {
        gpio_led_test();
 8000158:	f000 f934 	bl	80003c4 <gpio_led_test>
 800015c:	e7fc      	b.n	8000158 <main+0xc>
	...

08000160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000164:	4b15      	ldr	r3, [pc, #84]	; (80001bc <SystemInit+0x5c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a14      	ldr	r2, [pc, #80]	; (80001bc <SystemInit+0x5c>)
 800016a:	f043 0301 	orr.w	r3, r3, #1
 800016e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <SystemInit+0x5c>)
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	4911      	ldr	r1, [pc, #68]	; (80001bc <SystemInit+0x5c>)
 8000176:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <SystemInit+0x60>)
 8000178:	4013      	ands	r3, r2
 800017a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800017c:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <SystemInit+0x5c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <SystemInit+0x5c>)
 8000182:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800018a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <SystemInit+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <SystemInit+0x5c>)
 8000192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000196:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <SystemInit+0x5c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <SystemInit+0x5c>)
 800019e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <SystemInit+0x5c>)
 80001a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80001ac:	f000 f878 	bl	80002a0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <SystemInit+0x64>)
 80001b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40021000 	.word	0x40021000
 80001c0:	f8ff0000 	.word	0xf8ff0000
 80001c4:	e000ed00 	.word	0xe000ed00

080001c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001da:	4b2c      	ldr	r3, [pc, #176]	; (800028c <SystemCoreClockUpdate+0xc4>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	f003 030c 	and.w	r3, r3, #12
 80001e2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2b04      	cmp	r3, #4
 80001e8:	d007      	beq.n	80001fa <SystemCoreClockUpdate+0x32>
 80001ea:	2b08      	cmp	r3, #8
 80001ec:	d009      	beq.n	8000202 <SystemCoreClockUpdate+0x3a>
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d133      	bne.n	800025a <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 80001f4:	4a27      	ldr	r2, [pc, #156]	; (8000294 <SystemCoreClockUpdate+0xcc>)
 80001f6:	601a      	str	r2, [r3, #0]
      break;
 80001f8:	e033      	b.n	8000262 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80001fa:	4b25      	ldr	r3, [pc, #148]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 80001fc:	4a25      	ldr	r2, [pc, #148]	; (8000294 <SystemCoreClockUpdate+0xcc>)
 80001fe:	601a      	str	r2, [r3, #0]
      break;
 8000200:	e02f      	b.n	8000262 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000202:	4b22      	ldr	r3, [pc, #136]	; (800028c <SystemCoreClockUpdate+0xc4>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800020a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <SystemCoreClockUpdate+0xc4>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000214:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	0c9b      	lsrs	r3, r3, #18
 800021a:	3302      	adds	r3, #2
 800021c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d106      	bne.n	8000232 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <SystemCoreClockUpdate+0xd0>)
 8000228:	fb02 f303 	mul.w	r3, r2, r3
 800022c:	4a18      	ldr	r2, [pc, #96]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 800022e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000230:	e017      	b.n	8000262 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <SystemCoreClockUpdate+0xc4>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	2b00      	cmp	r3, #0
 800023c:	d006      	beq.n	800024c <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	4a15      	ldr	r2, [pc, #84]	; (8000298 <SystemCoreClockUpdate+0xd0>)
 8000242:	fb02 f303 	mul.w	r3, r2, r3
 8000246:	4a12      	ldr	r2, [pc, #72]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 8000248:	6013      	str	r3, [r2, #0]
      break;
 800024a:	e00a      	b.n	8000262 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <SystemCoreClockUpdate+0xcc>)
 8000250:	fb02 f303 	mul.w	r3, r2, r3
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 8000256:	6013      	str	r3, [r2, #0]
      break;
 8000258:	e003      	b.n	8000262 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <SystemCoreClockUpdate+0xcc>)
 800025e:	601a      	str	r2, [r3, #0]
      break;
 8000260:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <SystemCoreClockUpdate+0xc4>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	091b      	lsrs	r3, r3, #4
 8000268:	f003 030f 	and.w	r3, r3, #15
 800026c:	4a0b      	ldr	r2, [pc, #44]	; (800029c <SystemCoreClockUpdate+0xd4>)
 800026e:	5cd3      	ldrb	r3, [r2, r3]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	fa22 f303 	lsr.w	r3, r2, r3
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <SystemCoreClockUpdate+0xc8>)
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40021000 	.word	0x40021000
 8000290:	20000000 	.word	0x20000000
 8000294:	007a1200 	.word	0x007a1200
 8000298:	003d0900 	.word	0x003d0900
 800029c:	20000004 	.word	0x20000004

080002a0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80002a4:	f000 f802 	bl	80002ac <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	2300      	movs	r3, #0
 80002b8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002ba:	4b3a      	ldr	r3, [pc, #232]	; (80003a4 <SetSysClockTo72+0xf8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a39      	ldr	r2, [pc, #228]	; (80003a4 <SetSysClockTo72+0xf8>)
 80002c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002c6:	4b37      	ldr	r3, [pc, #220]	; (80003a4 <SetSysClockTo72+0xf8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d103      	bne.n	80002e4 <SetSysClockTo72+0x38>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002e2:	d1f0      	bne.n	80002c6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002e4:	4b2f      	ldr	r3, [pc, #188]	; (80003a4 <SetSysClockTo72+0xf8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002f0:	2301      	movs	r3, #1
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	e001      	b.n	80002fa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002f6:	2300      	movs	r3, #0
 80002f8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d14b      	bne.n	8000398 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <SetSysClockTo72+0xfc>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <SetSysClockTo72+0xfc>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <SetSysClockTo72+0xfc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <SetSysClockTo72+0xfc>)
 8000312:	f023 0303 	bic.w	r3, r3, #3
 8000316:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <SetSysClockTo72+0xfc>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <SetSysClockTo72+0xfc>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000326:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <SetSysClockTo72+0xf8>)
 800032e:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <SetSysClockTo72+0xf8>)
 800033a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800033e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000346:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800034a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <SetSysClockTo72+0xf8>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000352:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000356:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <SetSysClockTo72+0xf8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <SetSysClockTo72+0xf8>)
 800035e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000362:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000364:	bf00      	nop
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000378:	f023 0303 	bic.w	r3, r3, #3
 800037c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <SetSysClockTo72+0xf8>)
 8000384:	f043 0302 	orr.w	r3, r3, #2
 8000388:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800038a:	bf00      	nop
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SetSysClockTo72+0xf8>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f003 030c 	and.w	r3, r3, #12
 8000394:	2b08      	cmp	r3, #8
 8000396:	d1f9      	bne.n	800038c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40022000 	.word	0x40022000

080003ac <gpio_init>:
#include "ysh_gpio.h"

void gpio_init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
    /* GPIO_PC13(通用推完输出，50MHz) */
    GPIOC->CRH = (uint32_t)0x00300000;
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <gpio_init+0x14>)
 80003b2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003b6:	605a      	str	r2, [r3, #4]
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40011000 	.word	0x40011000

080003c4 <gpio_led_test>:


void gpio_led_test(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    /* 端口位设置/清除寄存器(GPIOx_BSRR) */
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BR13;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <gpio_led_test+0x28>)
 80003ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003ce:	611a      	str	r2, [r3, #16]
    delay_ms(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f000 f8f2 	bl	80005bc <delay_ms>
    GPIOC->BSRR = (uint32_t)GPIO_BSRR_BS13;
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <gpio_led_test+0x28>)
 80003da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003de:	611a      	str	r2, [r3, #16]
    delay_ms(500);
 80003e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e4:	f000 f8ea 	bl	80005bc <delay_ms>
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40011000 	.word	0x40011000

080003f0 <rcc_init>:
#include "ysh_rcc.h"

void rcc_init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
    /* 开启“AFIO”时钟(辅助功能IO时钟使能) */
    //RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_AFIOEN;

    /* 开启“GPIOC”时钟 */
    RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_IOPCEN;
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <rcc_init+0x18>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a03      	ldr	r2, [pc, #12]	; (8000408 <rcc_init+0x18>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]

    /* 开启“通用定时器2”时钟 */
    //RCC->APB1ENR |= (uint32_t)RCC_APB1ENR_TIM2EN;
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <rcc_default>:



void rcc_default(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <rcc_default+0x54>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <rcc_default+0x54>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6013      	str	r3, [r2, #0]
    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    /* (MCO: 微控制器时钟输出)   (ADCPRE[1:0]:ADC预分频) */
    /* (PPRE2[2:0]: 高速APB预分频APB2) (PPRE1[2:0]:低速APB预分频APB1)*/
    /* (HPRE [3:0]: AHB预分频) */
    /* (SWS  [1:0]: 系统时钟切换状态) (SW[1:0]:系统时钟切换) */
    RCC->CFGR &= (uint32_t)0xF8FF0000;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <rcc_default+0x54>)
 800041e:	685a      	ldr	r2, [r3, #4]
 8000420:	490f      	ldr	r1, [pc, #60]	; (8000460 <rcc_default+0x54>)
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <rcc_default+0x58>)
 8000424:	4013      	ands	r3, r2
 8000426:	604b      	str	r3, [r1, #4]
    
    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <rcc_default+0x54>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <rcc_default+0x54>)
 800042e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000436:	6013      	str	r3, [r2, #0]

    /* Reset HSEBYP bit (0:外部4-16MHz振荡器没有旁路) */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <rcc_default+0x54>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a08      	ldr	r2, [pc, #32]	; (8000460 <rcc_default+0x54>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <rcc_default+0x54>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	4a05      	ldr	r2, [pc, #20]	; (8000460 <rcc_default+0x54>)
 800044a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800044e:	6053      	str	r3, [r2, #4]
    
    /* Disable all interrupts and clear pending bits  */
    RCC->CIR = 0x009F0000;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <rcc_default+0x54>)
 8000452:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000456:	609a      	str	r2, [r3, #8]
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	f8ff0000 	.word	0xf8ff0000

08000468 <set_clock_72>:



void set_clock_72(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
    __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	2300      	movs	r3, #0
 8000474:	603b      	str	r3, [r7, #0]


    /* Enable HSE */    
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000476:	4b3a      	ldr	r3, [pc, #232]	; (8000560 <set_clock_72+0xf8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a39      	ldr	r2, [pc, #228]	; (8000560 <set_clock_72+0xf8>)
 800047c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000480:	6013      	str	r3, [r2, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000482:	4b37      	ldr	r3, [pc, #220]	; (8000560 <set_clock_72+0xf8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	603b      	str	r3, [r7, #0]
        StartUpCounter++;  
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d103      	bne.n	80004a0 <set_clock_72+0x38>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800049e:	d1f0      	bne.n	8000482 <set_clock_72+0x1a>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004a0:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <set_clock_72+0xf8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <set_clock_72+0x4a>
    {
        HSEStatus = (uint32_t)0x01;
 80004ac:	2301      	movs	r3, #1
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	e001      	b.n	80004b6 <set_clock_72+0x4e>
    }
    else
    {
        HSEStatus = (uint32_t)0x00;
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
    }  


    if (HSEStatus == (uint32_t)0x01)
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d14b      	bne.n	8000554 <set_clock_72+0xec>
    {
        /* Enable Prefetch Buffer */
        FLASH->ACR |= FLASH_ACR_PRFTBE;
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <set_clock_72+0xfc>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a28      	ldr	r2, [pc, #160]	; (8000564 <set_clock_72+0xfc>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6013      	str	r3, [r2, #0]

        /* Flash 2 wait state */
        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <set_clock_72+0xfc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a25      	ldr	r2, [pc, #148]	; (8000564 <set_clock_72+0xfc>)
 80004ce:	f023 0303 	bic.w	r3, r3, #3
 80004d2:	6013      	str	r3, [r2, #0]
        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <set_clock_72+0xfc>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a22      	ldr	r2, [pc, #136]	; (8000564 <set_clock_72+0xfc>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6013      	str	r3, [r2, #0]


        /* HCLK = SYSCLK */
        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <set_clock_72+0xf8>)
 80004e2:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <set_clock_72+0xf8>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	6053      	str	r3, [r2, #4]
          
        /* PCLK2 = HCLK */
        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_clock_72+0xf8>)
 80004ea:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <set_clock_72+0xf8>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	6053      	str	r3, [r2, #4]

        /* PCLK1 = HCLK */
        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <set_clock_72+0xf8>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a1a      	ldr	r2, [pc, #104]	; (8000560 <set_clock_72+0xf8>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6053      	str	r3, [r2, #4]


        /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <set_clock_72+0xf8>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <set_clock_72+0xf8>)
 8000502:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000506:	6053      	str	r3, [r2, #4]
                                            RCC_CFGR_PLLMULL));
        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <set_clock_72+0xf8>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <set_clock_72+0xf8>)
 800050e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000512:	6053      	str	r3, [r2, #4]

         /* Enable PLL */
        RCC->CR |= RCC_CR_PLLON;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <set_clock_72+0xf8>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <set_clock_72+0xf8>)
 800051a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800051e:	6013      	str	r3, [r2, #0]

        /* Wait till PLL is ready */
        while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000520:	bf00      	nop
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <set_clock_72+0xf8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <set_clock_72+0xba>
        {
        }

        /* Select PLL as system clock source */
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <set_clock_72+0xf8>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <set_clock_72+0xf8>)
 8000534:	f023 0303 	bic.w	r3, r3, #3
 8000538:	6053      	str	r3, [r2, #4]
        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <set_clock_72+0xf8>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <set_clock_72+0xf8>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6053      	str	r3, [r2, #4]

        /* Wait till PLL is used as system clock source */
        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000546:	bf00      	nop
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <set_clock_72+0xf8>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f003 030c 	and.w	r3, r3, #12
 8000550:	2b08      	cmp	r3, #8
 8000552:	d1f9      	bne.n	8000548 <set_clock_72+0xe0>
    }
    else
    { /* If HSE fails to start-up, the application will have wrong clock 
             configuration. User can add here some code to deal with this error */
    }
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40022000 	.word	0x40022000

08000568 <delay_us>:
#include "ysh_common.h"

void delay_us(u32 nus)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	 u32 temp;
	 SysTick->LOAD = 9*nus; 
 8000570:	4911      	ldr	r1, [pc, #68]	; (80005b8 <delay_us+0x50>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4613      	mov	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4413      	add	r3, r2
 800057a:	604b      	str	r3, [r1, #4]
	 SysTick->VAL  = 0X00; 
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <delay_us+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
	 SysTick->CTRL = 0X01; 
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <delay_us+0x50>)
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
	 do
	 {
		temp = SysTick->CTRL; 
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <delay_us+0x50>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
	 }
	 while ((temp&0x01) && (!(temp&(1<<16))));
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d004      	beq.n	80005a2 <delay_us+0x3a>
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f2      	beq.n	8000588 <delay_us+0x20>
	 
	 SysTick->CTRL = 0x00; 
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <delay_us+0x50>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
	 SysTick->VAL  = 0X00; 
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <delay_us+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	e000e010 	.word	0xe000e010

080005bc <delay_ms>:


void delay_ms(u32 nms)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	 u32 temp;
	 SysTick->LOAD = 9000*nms;
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <delay_ms+0x54>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f242 3128 	movw	r1, #9000	; 0x2328
 80005cc:	fb01 f303 	mul.w	r3, r1, r3
 80005d0:	6053      	str	r3, [r2, #4]
	 SysTick->VAL  = 0X00; 
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <delay_ms+0x54>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
	 SysTick->CTRL = 0X01; 
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <delay_ms+0x54>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
	 do
	 {
		temp = SysTick->CTRL; 
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delay_ms+0x54>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]
	 }
	 while ((temp&0x01) && (!(temp&(1<<16)))); 
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <delay_ms+0x3c>
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f2      	beq.n	80005de <delay_ms+0x22>
	 
	 SysTick->CTRL = 0x00; 
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <delay_ms+0x54>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
	 SysTick->VAL  = 0X00; 
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <delay_ms+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4e0d      	ldr	r6, [pc, #52]	; (800064c <__libc_init_array+0x38>)
 8000618:	4d0d      	ldr	r5, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061a:	1b76      	subs	r6, r6, r5
 800061c:	10b6      	asrs	r6, r6, #2
 800061e:	d006      	beq.n	800062e <__libc_init_array+0x1a>
 8000620:	2400      	movs	r4, #0
 8000622:	3401      	adds	r4, #1
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	42a6      	cmp	r6, r4
 800062c:	d1f9      	bne.n	8000622 <__libc_init_array+0xe>
 800062e:	4e09      	ldr	r6, [pc, #36]	; (8000654 <__libc_init_array+0x40>)
 8000630:	4d09      	ldr	r5, [pc, #36]	; (8000658 <__libc_init_array+0x44>)
 8000632:	f000 f8c7 	bl	80007c4 <_init>
 8000636:	1b76      	subs	r6, r6, r5
 8000638:	10b6      	asrs	r6, r6, #2
 800063a:	d006      	beq.n	800064a <__libc_init_array+0x36>
 800063c:	2400      	movs	r4, #0
 800063e:	3401      	adds	r4, #1
 8000640:	f855 3b04 	ldr.w	r3, [r5], #4
 8000644:	4798      	blx	r3
 8000646:	42a6      	cmp	r6, r4
 8000648:	d1f9      	bne.n	800063e <__libc_init_array+0x2a>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	080007e0 	.word	0x080007e0
 8000650:	080007e0 	.word	0x080007e0
 8000654:	080007e8 	.word	0x080007e8
 8000658:	080007e0 	.word	0x080007e0

0800065c <register_fini>:
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <register_fini+0xc>)
 800065e:	b113      	cbz	r3, 8000666 <register_fini+0xa>
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <register_fini+0x10>)
 8000662:	f000 b805 	b.w	8000670 <atexit>
 8000666:	4770      	bx	lr
 8000668:	00000000 	.word	0x00000000
 800066c:	0800067d 	.word	0x0800067d

08000670 <atexit>:
 8000670:	2300      	movs	r3, #0
 8000672:	4601      	mov	r1, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 b81e 	b.w	80006b8 <__register_exitproc>

0800067c <__libc_fini_array>:
 800067c:	b538      	push	{r3, r4, r5, lr}
 800067e:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <__libc_fini_array+0x2c>)
 8000680:	4d0a      	ldr	r5, [pc, #40]	; (80006ac <__libc_fini_array+0x30>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	d00a      	beq.n	800069e <__libc_fini_array+0x22>
 8000688:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800068c:	3b01      	subs	r3, #1
 800068e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000692:	3c01      	subs	r4, #1
 8000694:	f855 3904 	ldr.w	r3, [r5], #-4
 8000698:	4798      	blx	r3
 800069a:	2c00      	cmp	r4, #0
 800069c:	d1f9      	bne.n	8000692 <__libc_fini_array+0x16>
 800069e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006a2:	f000 b895 	b.w	80007d0 <_fini>
 80006a6:	bf00      	nop
 80006a8:	080007ec 	.word	0x080007ec
 80006ac:	080007e8 	.word	0x080007e8

080006b0 <__retarget_lock_acquire_recursive>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__retarget_lock_release_recursive>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__register_exitproc>:
 80006b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006bc:	4d2b      	ldr	r5, [pc, #172]	; (800076c <__register_exitproc+0xb4>)
 80006be:	4606      	mov	r6, r0
 80006c0:	6828      	ldr	r0, [r5, #0]
 80006c2:	4698      	mov	r8, r3
 80006c4:	460f      	mov	r7, r1
 80006c6:	4691      	mov	r9, r2
 80006c8:	f7ff fff2 	bl	80006b0 <__retarget_lock_acquire_recursive>
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <__register_exitproc+0xb8>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d03d      	beq.n	8000754 <__register_exitproc+0x9c>
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	2a1f      	cmp	r2, #31
 80006dc:	dc0d      	bgt.n	80006fa <__register_exitproc+0x42>
 80006de:	f102 0c01 	add.w	ip, r2, #1
 80006e2:	bb16      	cbnz	r6, 800072a <__register_exitproc+0x72>
 80006e4:	3202      	adds	r2, #2
 80006e6:	f8c3 c004 	str.w	ip, [r3, #4]
 80006ea:	6828      	ldr	r0, [r5, #0]
 80006ec:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 80006f0:	f7ff ffe0 	bl	80006b4 <__retarget_lock_release_recursive>
 80006f4:	2000      	movs	r0, #0
 80006f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <__register_exitproc+0xbc>)
 80006fc:	b37b      	cbz	r3, 800075e <__register_exitproc+0xa6>
 80006fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000702:	f3af 8000 	nop.w
 8000706:	4603      	mov	r3, r0
 8000708:	b348      	cbz	r0, 800075e <__register_exitproc+0xa6>
 800070a:	2000      	movs	r0, #0
 800070c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8000710:	f04f 0c01 	mov.w	ip, #1
 8000714:	e9c3 1000 	strd	r1, r0, [r3]
 8000718:	4602      	mov	r2, r0
 800071a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800071e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000722:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0dc      	beq.n	80006e4 <__register_exitproc+0x2c>
 800072a:	2101      	movs	r1, #1
 800072c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8000730:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8000734:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8000738:	4091      	lsls	r1, r2
 800073a:	4308      	orrs	r0, r1
 800073c:	2e02      	cmp	r6, #2
 800073e:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000742:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8000746:	d1cd      	bne.n	80006e4 <__register_exitproc+0x2c>
 8000748:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 800074c:	4301      	orrs	r1, r0
 800074e:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000752:	e7c7      	b.n	80006e4 <__register_exitproc+0x2c>
 8000754:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8000758:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800075c:	e7bc      	b.n	80006d8 <__register_exitproc+0x20>
 800075e:	6828      	ldr	r0, [r5, #0]
 8000760:	f7ff ffa8 	bl	80006b4 <__retarget_lock_release_recursive>
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	e7c5      	b.n	80006f6 <__register_exitproc+0x3e>
 800076a:	bf00      	nop
 800076c:	20000440 	.word	0x20000440
 8000770:	080007dc 	.word	0x080007dc
 8000774:	00000000 	.word	0x00000000

08000778 <Reset_Handler>:
 8000778:	2100      	movs	r1, #0
 800077a:	e003      	b.n	8000784 <LoopCopyDataInit>

0800077c <CopyDataInit>:
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <LoopFillZerobss+0x14>)
 800077e:	585b      	ldr	r3, [r3, r1]
 8000780:	5043      	str	r3, [r0, r1]
 8000782:	3104      	adds	r1, #4

08000784 <LoopCopyDataInit>:
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <LoopFillZerobss+0x18>)
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <LoopFillZerobss+0x1c>)
 8000788:	1842      	adds	r2, r0, r1
 800078a:	429a      	cmp	r2, r3
 800078c:	d3f6      	bcc.n	800077c <CopyDataInit>
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopFillZerobss+0x20>)
 8000790:	e002      	b.n	8000798 <LoopFillZerobss>

08000792 <FillZerobss>:
 8000792:	2300      	movs	r3, #0
 8000794:	f842 3b04 	str.w	r3, [r2], #4

08000798 <LoopFillZerobss>:
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <LoopFillZerobss+0x24>)
 800079a:	429a      	cmp	r2, r3
 800079c:	d3f9      	bcc.n	8000792 <FillZerobss>
 800079e:	f7ff fcdf 	bl	8000160 <SystemInit>
 80007a2:	f7ff ff37 	bl	8000614 <__libc_init_array>
 80007a6:	f7ff fcd1 	bl	800014c <main>
 80007aa:	4770      	bx	lr
 80007ac:	080007ec 	.word	0x080007ec
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000444 	.word	0x20000444
 80007b8:	20000444 	.word	0x20000444
 80007bc:	20000484 	.word	0x20000484

080007c0 <ADC1_2_IRQHandler>:
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <_init>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	bf00      	nop
 80007c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ca:	bc08      	pop	{r3}
 80007cc:	469e      	mov	lr, r3
 80007ce:	4770      	bx	lr

080007d0 <_fini>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	bf00      	nop
 80007d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d6:	bc08      	pop	{r3}
 80007d8:	469e      	mov	lr, r3
 80007da:	4770      	bx	lr
