############################################################
### % 自举配置
############################################################
% 存储器采用固定的存储器映射,
代码区域起始地址为 0x0000 0000(通过 ICode/DCode 总线 访 问),
数据区域起始地址为 0x2000 0000(通过 系 统 总 线 访 问)。
CortexTM-M4F CPU 始终通过 ICode 总线获取复位向量,这意味着只有代码区域
(通常为 Flash)可以提供自举空间。
STM32F4xx 微控制器实施一种特殊机制,可以从其它存储器(如内部 SRAM)进行自举。
在 STM32F4xx 中,可通过 BOOT[1:0] 引脚选择三种不同的自举模式,如 表 3 所示。
% 自举模式选择引脚
___________________________________________________________                 
% BOOT1     BOOT0       自举模式        自举空间 
    x       0           主Flash        选择主 Flash 作为自举空间
    0       1           系统存储器      选择系统存储器作为自举空间
    1       1           嵌入式SRAM      选择嵌入式 SRAM 作为自举空间
___________________________________________________________

1 % 复位后,在 SYSCLK 的第四个上升沿锁存 BOOT 引脚的值。
  复位后,用户可以通过设置BOOT1 和 BOOT0 引脚来选择需要的自举模式。
  
  
2 % BOOT0 为专用引脚,而 BOOT1 则与 GPIO 引脚共用。
  一旦完成对 BOOT1 的采样,相应GPIO 引脚即进入空闲状态,可用于其它用途。 
  
  
3 % 器件退出待机模式时,还会对 BOOT 引脚重新采样。因此,当器件处于待机模式时,这些引
  脚必须保持所需的自举模式配置。这样的启动延迟结束后,CPU 将从地址 0x0000 0000 获
  取栈顶值,然后从始于 0x0000 0004 的自举存储器开始执行代码。  
  
  
! 注意: 如果器件从 SRAM 自举,在应用程序初始化代码中,需要使用 NVIC 异常及中断向量表和偏
      移寄存器来重新分配 SRAM 中的向量表。  
  
  
  
  
