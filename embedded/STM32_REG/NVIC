############################################################
### % Cortex-M3 NVIC
############################################################
SCB->AIRCR 寄存器的10:8位bit，决定了，
IP寄存器4:7bit的高四位的抢占与响应位的分配
% N    SCB->AIRC[10:8]    IPR[7:4]       分配结果
_______________________________________________________________
0           111             0:4        0位抢占优先级, 4位响应优先级
1           110             1:3        1位抢占优先级, 3位响应优先级
2           101             2:2        2位抢占优先级, 2位响应优先级
3           100             3:1        3位抢占优先级, 1位响应优先级
4           011             4:0        4位抢占优先级, 0位响应优先级
_______________________________________________________________
0           111  ______________________，所有8位用于指定响应优先级
1           110  最高1位用于指定抢占式优先级，最低7位用于指定响应优先级
2           101  最高2位用于指定抢占式优先级，最低6位用于指定响应优先级
3           100  最高3位用于指定抢占式优先级，最低5位用于指定响应优先级
4           011  最高4位用于指定抢占式优先级，最低4位用于指定响应优先级
5           010  最高5位用于指定抢占式优先级，最低3位用于指定响应优先级
6           001  最高6位用于指定抢占式优先级，最低2位用于指定响应优先级
7           000  最高7位用于指定抢占式优先级，最低1位用于指定响应优先级  
_______________________________________________________________
Cortex-M3允许具有较少中断源时使用较少的寄存器位指定中断源的优先级，
因此STM32把指定中断优先级的寄存器位减少到4位，这4个寄存器位的分组方式如下：
第0组：所有4位用于指定响应优先级
第1组：最高1位用于指定抢占式优先级，最低3位用于指定响应优先级
第2组：最高2位用于指定抢占式优先级，最低2位用于指定响应优先级
第3组：最高3位用于指定抢占式优先级，最低1位用于指定响应优先级
第4组：所有4位用于指定抢占式优先级
_______________________________________________________________
1）抢占优先级越小，优先级越高；相同抢占优先级的中断不能嵌套；

2）相同抢占优先级N个中断发生时，响应优先级越小的中断首先执行（不能嵌套），
   如果响应优先级也均相同，则根据各中断对应向量表的位置来确定，
   向量表中越靠前的中断先响应。
   
 
 
############################################################
### % NVIC()
############################################################
AIRC（Application Interrupt and Reset ControlRegister）
31:16(VECTKEY) %访问钥匙:任何对该寄存器的写操作,都必须同时把 0x05FA 
写入此段,否则写操作被忽略。若读取此半字,则 0xFA05
SCB->AIRCR = 0x05FA0000 | 0x400;  //3位抢占优先级, 1位响应优先级


39号中断，最高级中断，没有中断的能打断。
NVIC->IP[39] = 0xf0; //最低抢占优先级，最低响应优先级1111






