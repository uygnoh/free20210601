
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	08000474 	.word	0x08000474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	08000474 	.word	0x08000474

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800014e:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8000150:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000154:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000156:	493b      	ldr	r1, [pc, #236]	; (8000244 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8000158:	6818      	ldr	r0, [r3, #0]
{
 800015a:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 800015c:	f040 0001 	orr.w	r0, r0, #1
 8000160:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000162:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000164:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000166:	4001      	ands	r1, r0
 8000168:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800016a:	6819      	ldr	r1, [r3, #0]
 800016c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000170:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000174:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000176:	6819      	ldr	r1, [r3, #0]
 8000178:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800017c:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800017e:	6859      	ldr	r1, [r3, #4]
 8000180:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000184:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8000186:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000188:	9400      	str	r4, [sp, #0]
 800018a:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800018c:	6819      	ldr	r1, [r3, #0]
 800018e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000192:	6019      	str	r1, [r3, #0]
 8000194:	e003      	b.n	800019e <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000196:	9b00      	ldr	r3, [sp, #0]
 8000198:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800019c:	d009      	beq.n	80001b2 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001a4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80001a6:	9b00      	ldr	r3, [sp, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001ac:	9b01      	ldr	r3, [sp, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f1      	beq.n	8000196 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b2:	4b23      	ldr	r3, [pc, #140]	; (8000240 <SystemInit+0xf4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80001ba:	bf18      	it	ne
 80001bc:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c0:	9b01      	ldr	r3, [sp, #4]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d006      	beq.n	80001d4 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ca:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <SystemInit+0xfc>)
 80001cc:	609a      	str	r2, [r3, #8]
}
 80001ce:	b002      	add	sp, #8
 80001d0:	bc30      	pop	{r4, r5}
 80001d2:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d4:	491d      	ldr	r1, [pc, #116]	; (800024c <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001d6:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d8:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80001da:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001dc:	f040 0010 	orr.w	r0, r0, #16
 80001e0:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001e2:	6808      	ldr	r0, [r1, #0]
 80001e4:	f020 0003 	bic.w	r0, r0, #3
 80001e8:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001ea:	6808      	ldr	r0, [r1, #0]
 80001ec:	f040 0002 	orr.w	r0, r0, #2
 80001f0:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001f2:	6859      	ldr	r1, [r3, #4]
 80001f4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001f6:	6859      	ldr	r1, [r3, #4]
 80001f8:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fa:	6859      	ldr	r1, [r3, #4]
 80001fc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000200:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000202:	6859      	ldr	r1, [r3, #4]
 8000204:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000208:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800020a:	6859      	ldr	r1, [r3, #4]
 800020c:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000210:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000218:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	019b      	lsls	r3, r3, #6
 800021e:	d5fc      	bpl.n	800021a <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000220:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000222:	4907      	ldr	r1, [pc, #28]	; (8000240 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000224:	f023 0303 	bic.w	r3, r3, #3
 8000228:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800022a:	6853      	ldr	r3, [r2, #4]
 800022c:	f043 0302 	orr.w	r3, r3, #2
 8000230:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000232:	684b      	ldr	r3, [r1, #4]
 8000234:	f003 030c 	and.w	r3, r3, #12
 8000238:	2b08      	cmp	r3, #8
 800023a:	d1fa      	bne.n	8000232 <SystemInit+0xe6>
 800023c:	e7c3      	b.n	80001c6 <SystemInit+0x7a>
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	f8ff0000 	.word	0xf8ff0000
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40022000 	.word	0x40022000

08000250 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <SystemCoreClockUpdate+0x48>)
 8000252:	6853      	ldr	r3, [r2, #4]
 8000254:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000258:	2b08      	cmp	r3, #8
 800025a:	d10e      	bne.n	800027a <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800025c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800025e:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000260:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000264:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000266:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 800026a:	d510      	bpl.n	800028e <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800026c:	6852      	ldr	r2, [r2, #4]
 800026e:	0392      	lsls	r2, r2, #14
 8000270:	d40d      	bmi.n	800028e <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SystemCoreClockUpdate+0x4c>)
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	e000      	b.n	800027c <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SystemCoreClockUpdate+0x48>)
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <SystemCoreClockUpdate+0x50>)
 8000280:	6852      	ldr	r2, [r2, #4]
 8000282:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000286:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 8000288:	40d3      	lsrs	r3, r2
 800028a:	610b      	str	r3, [r1, #16]
}
 800028c:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <SystemCoreClockUpdate+0x54>)
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	e7f2      	b.n	800027c <SystemCoreClockUpdate+0x2c>
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	007a1200 	.word	0x007a1200
 80002a0:	20000000 	.word	0x20000000
 80002a4:	003d0900 	.word	0x003d0900

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	4e0d      	ldr	r6, [pc, #52]	; (80002e0 <__libc_init_array+0x38>)
 80002ac:	4d0d      	ldr	r5, [pc, #52]	; (80002e4 <__libc_init_array+0x3c>)
 80002ae:	1b76      	subs	r6, r6, r5
 80002b0:	10b6      	asrs	r6, r6, #2
 80002b2:	d006      	beq.n	80002c2 <__libc_init_array+0x1a>
 80002b4:	2400      	movs	r4, #0
 80002b6:	3401      	adds	r4, #1
 80002b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002bc:	4798      	blx	r3
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d1f9      	bne.n	80002b6 <__libc_init_array+0xe>
 80002c2:	4e09      	ldr	r6, [pc, #36]	; (80002e8 <__libc_init_array+0x40>)
 80002c4:	4d09      	ldr	r5, [pc, #36]	; (80002ec <__libc_init_array+0x44>)
 80002c6:	f000 f8d5 	bl	8000474 <_init>
 80002ca:	1b76      	subs	r6, r6, r5
 80002cc:	10b6      	asrs	r6, r6, #2
 80002ce:	d006      	beq.n	80002de <__libc_init_array+0x36>
 80002d0:	2400      	movs	r4, #0
 80002d2:	3401      	adds	r4, #1
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d1f9      	bne.n	80002d2 <__libc_init_array+0x2a>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	08000490 	.word	0x08000490
 80002e4:	08000490 	.word	0x08000490
 80002e8:	08000498 	.word	0x08000498
 80002ec:	08000490 	.word	0x08000490

080002f0 <register_fini>:
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <register_fini+0xc>)
 80002f2:	b113      	cbz	r3, 80002fa <register_fini+0xa>
 80002f4:	4802      	ldr	r0, [pc, #8]	; (8000300 <register_fini+0x10>)
 80002f6:	f000 b805 	b.w	8000304 <atexit>
 80002fa:	4770      	bx	lr
 80002fc:	00000000 	.word	0x00000000
 8000300:	08000311 	.word	0x08000311

08000304 <atexit>:
 8000304:	2300      	movs	r3, #0
 8000306:	4601      	mov	r1, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4618      	mov	r0, r3
 800030c:	f000 b81e 	b.w	800034c <__register_exitproc>

08000310 <__libc_fini_array>:
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4c0a      	ldr	r4, [pc, #40]	; (800033c <__libc_fini_array+0x2c>)
 8000314:	4d0a      	ldr	r5, [pc, #40]	; (8000340 <__libc_fini_array+0x30>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	d00a      	beq.n	8000332 <__libc_fini_array+0x22>
 800031c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8000320:	3b01      	subs	r3, #1
 8000322:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000326:	3c01      	subs	r4, #1
 8000328:	f855 3904 	ldr.w	r3, [r5], #-4
 800032c:	4798      	blx	r3
 800032e:	2c00      	cmp	r4, #0
 8000330:	d1f9      	bne.n	8000326 <__libc_fini_array+0x16>
 8000332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000336:	f000 b8a3 	b.w	8000480 <_fini>
 800033a:	bf00      	nop
 800033c:	0800049c 	.word	0x0800049c
 8000340:	08000498 	.word	0x08000498

08000344 <__retarget_lock_acquire_recursive>:
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop

08000348 <__retarget_lock_release_recursive>:
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop

0800034c <__register_exitproc>:
 800034c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000350:	4d2b      	ldr	r5, [pc, #172]	; (8000400 <__register_exitproc+0xb4>)
 8000352:	4606      	mov	r6, r0
 8000354:	6828      	ldr	r0, [r5, #0]
 8000356:	4698      	mov	r8, r3
 8000358:	460f      	mov	r7, r1
 800035a:	4691      	mov	r9, r2
 800035c:	f7ff fff2 	bl	8000344 <__retarget_lock_acquire_recursive>
 8000360:	4b28      	ldr	r3, [pc, #160]	; (8000404 <__register_exitproc+0xb8>)
 8000362:	681c      	ldr	r4, [r3, #0]
 8000364:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000368:	2b00      	cmp	r3, #0
 800036a:	d03d      	beq.n	80003e8 <__register_exitproc+0x9c>
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	2a1f      	cmp	r2, #31
 8000370:	dc0d      	bgt.n	800038e <__register_exitproc+0x42>
 8000372:	f102 0c01 	add.w	ip, r2, #1
 8000376:	bb16      	cbnz	r6, 80003be <__register_exitproc+0x72>
 8000378:	3202      	adds	r2, #2
 800037a:	f8c3 c004 	str.w	ip, [r3, #4]
 800037e:	6828      	ldr	r0, [r5, #0]
 8000380:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8000384:	f7ff ffe0 	bl	8000348 <__retarget_lock_release_recursive>
 8000388:	2000      	movs	r0, #0
 800038a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <__register_exitproc+0xbc>)
 8000390:	b37b      	cbz	r3, 80003f2 <__register_exitproc+0xa6>
 8000392:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000396:	f3af 8000 	nop.w
 800039a:	4603      	mov	r3, r0
 800039c:	b348      	cbz	r0, 80003f2 <__register_exitproc+0xa6>
 800039e:	2000      	movs	r0, #0
 80003a0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80003a4:	f04f 0c01 	mov.w	ip, #1
 80003a8:	e9c3 1000 	strd	r1, r0, [r3]
 80003ac:	4602      	mov	r2, r0
 80003ae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80003b2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80003b6:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0dc      	beq.n	8000378 <__register_exitproc+0x2c>
 80003be:	2101      	movs	r1, #1
 80003c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80003c4:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 80003c8:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 80003cc:	4091      	lsls	r1, r2
 80003ce:	4308      	orrs	r0, r1
 80003d0:	2e02      	cmp	r6, #2
 80003d2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 80003d6:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80003da:	d1cd      	bne.n	8000378 <__register_exitproc+0x2c>
 80003dc:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 80003e0:	4301      	orrs	r1, r0
 80003e2:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 80003e6:	e7c7      	b.n	8000378 <__register_exitproc+0x2c>
 80003e8:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 80003ec:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80003f0:	e7bc      	b.n	800036c <__register_exitproc+0x20>
 80003f2:	6828      	ldr	r0, [r5, #0]
 80003f4:	f7ff ffa8 	bl	8000348 <__retarget_lock_release_recursive>
 80003f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003fc:	e7c5      	b.n	800038a <__register_exitproc+0x3e>
 80003fe:	bf00      	nop
 8000400:	20000440 	.word	0x20000440
 8000404:	0800048c 	.word	0x0800048c
 8000408:	00000000 	.word	0x00000000

0800040c <Reset_Handler>:
 800040c:	2100      	movs	r1, #0
 800040e:	e003      	b.n	8000418 <LoopCopyDataInit>

08000410 <CopyDataInit>:
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <LoopFillZerobss+0x14>)
 8000412:	585b      	ldr	r3, [r3, r1]
 8000414:	5043      	str	r3, [r0, r1]
 8000416:	3104      	adds	r1, #4

08000418 <LoopCopyDataInit>:
 8000418:	480a      	ldr	r0, [pc, #40]	; (8000444 <LoopFillZerobss+0x18>)
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <LoopFillZerobss+0x1c>)
 800041c:	1842      	adds	r2, r0, r1
 800041e:	429a      	cmp	r2, r3
 8000420:	d3f6      	bcc.n	8000410 <CopyDataInit>
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopFillZerobss+0x20>)
 8000424:	e002      	b.n	800042c <LoopFillZerobss>

08000426 <FillZerobss>:
 8000426:	2300      	movs	r3, #0
 8000428:	f842 3b04 	str.w	r3, [r2], #4

0800042c <LoopFillZerobss>:
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <LoopFillZerobss+0x24>)
 800042e:	429a      	cmp	r2, r3
 8000430:	d3f9      	bcc.n	8000426 <FillZerobss>
 8000432:	f7ff fe8b 	bl	800014c <SystemInit>
 8000436:	f7ff ff37 	bl	80002a8 <__libc_init_array>
 800043a:	f000 f80d 	bl	8000458 <main>
 800043e:	4770      	bx	lr
 8000440:	0800049c 	.word	0x0800049c
 8000444:	20000000 	.word	0x20000000
 8000448:	20000444 	.word	0x20000444
 800044c:	20000444 	.word	0x20000444
 8000450:	20000484 	.word	0x20000484

08000454 <ADC1_2_IRQHandler>:
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <main>:

int main(void)
{
	/* 发送30个字符 'A' 到 USART的DR寄存器 */
	int i, data;
	data = 'A';
 8000458:	2141      	movs	r1, #65	; 0x41

	for (i = 0; i < 30; i++) {
		USART1->DR = data;
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <main+0x18>)
 800045c:	b28b      	uxth	r3, r1
 800045e:	8093      	strh	r3, [r2, #4]
		data++;
 8000460:	3101      	adds	r1, #1
		//等待数据发送完成
		while ((USART1->SR & M16_SET_BIT_06) == 0);
 8000462:	8813      	ldrh	r3, [r2, #0]
 8000464:	065b      	lsls	r3, r3, #25
 8000466:	d5fc      	bpl.n	8000462 <main+0xa>
	for (i = 0; i < 30; i++) {
 8000468:	295f      	cmp	r1, #95	; 0x5f
 800046a:	d1f7      	bne.n	800045c <main+0x4>
	}
}
 800046c:	2000      	movs	r0, #0
 800046e:	4770      	bx	lr
 8000470:	40013800 	.word	0x40013800

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
