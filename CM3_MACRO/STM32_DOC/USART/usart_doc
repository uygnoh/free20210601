###########################################################
### % usart通用异步同步收发器
###########################################################
/* % usart基本配置 */
USART1->CR1 |= (1<<13);     /* “UE”位使能 */
USART1->CR1 &= ~(1<<12);    /* “M”位定义字长 */
USART1->CR2 &= ~(3<<12);   /* USART1->CR2  &= ~((1<<12) | (1<<13));“1”个停止位 */
USART1->CR1 |= (1<<3);      /* “TE”位使能 */



/* % 分数波特率的产生
接收器和发送器(Rx和Tx)的波特率在 USARTDIV的整数和小数寄存器中的值应设置相同
            Tx或Rx 波特率 = ƒck/(16*USARTDIV)
1 ƒck是USART的时钟
2 USARTDIV是一个无符号的定点数，这“12”位的值设置在USART_BRR寄存器中
3 DIV_Mantisa整数部分; DIV_Fraction小部分  
4 波特率设置为9600bps; 外设时钟频率为72MHz
5 9600 = 72*1000*1000/(16*USARTDIV)
6 USARTDIV = 72000000/(9600*16) = 468.75;
7 DIV_M = 468; DIV_F = 0.75*16  = 12;
*/
float DIV;
uint16_t DIV_M, DIV_F, BRR;
uint32_t BOUND;
BOUND   = 9600;                                 /* 波特率设置 */
DIV     = (float)(72*1000*1000)/(BOUND*16);     /* 无符号的定点数 */
DIV_M   = DIV;	                                /* 取整数部分 */
DIV_F   = (DIV - DIV_M)*16;                     /* 取小数部分 */
BRR     = DIV_M<<4 + DIV_F;                     /* 整合整数部分和小数部分 */
USART1->BRR = BRR;                              /* 将整合后的数值放入BRR寄存器中 */



/* 发送30个字符 'A' 到 USART的DR寄存器 */
int i, data,;
data = 'A';

for (i = 0; i < 30; i++) 
{
	USART1->DR = data;
	data++;
	//等待数据发送完成
	while ((USART1->SR & (1<<6) == 0);
}

	
	
	
############################################################
### % (USART_SR)状态寄存器
############################################################
[7]TXE		% 发送数据寄存器空(Transmit data register empty)
		% 当TDR寄存器中的数据被硬件转移到移位寄存器的时候,该位被硬件置位。
		% 如果USART_CR1寄存器中的TXEIE为1,则产生中断。
		% 对USART_DR的写操作,将该位清零。
0:数据还没有被转移到移位寄存器;
1:数据已经被转移到移位寄存器。
注意:单缓冲器传输中使用该位。
____________________________________________________________
[6]TC		% 发送完成(Transmission complete)
		% 当包含有数据的一帧发送完成后,并且TXE=1时,由硬件将该位置’1’。
		% 如果USART_CR1中的TCIE为’1’,则产生中断。
		% 由软件序列清除该位(先读USART_SR,然后写入USART_DR)。
		% TC位也可以通过写入’0’来清除,只有在多缓存通讯中才推荐这种清除程序。
0:发送还未完成;
1:发送完成。
____________________________________________________________
[5]RXNE		% 读数据寄存器非空(Read data register not empty)
		% 当RDR移位寄存器中的数据被转移到USART_DR寄存器中,该位被硬件置位。
		% 如果USART_CR1寄存器中的RXNEIE为1,则产生中断。
		% 对USART_DR的读操作可以将该位清零。
		% RXNE位也可以通过写入0来清除,只有在多缓存通讯中才推荐这种清除程序。
0:数据没有收到;
1:收到数据,可以读出。



############################################################
### % (USART_CR1)控制寄存器1
############################################################
[7]TXEIE	% 发送缓冲区空中断使能(TXE interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的TXE为’1’时,产生USART中断。
____________________________________________________________
[6]TCIE		% 发送完成中断使能(Transmission complete interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的TC为’1’时,产生USART中断。
____________________________________________________________
[5]RXNEIE	% 接收缓冲区非空中断使能(RXNE interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的ORE或者RXNE为’1’时,产生USART中断。
____________________________________________________________
[3]TE		% 发送使能(Transmitter enable)
		% 该位使能发送器。该位由软件设置或清除。
0:禁止发送;
1:使能发送。
____________________________________________________________
[2]RE		% 接收使能 (Receiver enable)
		% 该位由软件设置或清除。
0:禁止接收;
1:使能接收,并开始搜寻RX引脚上的起始位。
