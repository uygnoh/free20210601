############################################################
### % linux回调函数
### % gcc ex.c -lpthread
############################################################
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>

// pthread_self()获取本线程的ID
// 返回值为void*类型
void* cb(void *arg)
{
    printf("call back runing, %u\n", pthread_self());
    return NULL;
}

int main(void)
{
    // 创建了两个线程，每个线程的执行函数都是cb
    
    pthread_t tid;
    // 将cb当参数传递进去，并没有调用它
    // 所以称cb为回调函数
    pthread_create(&tid, NULL, cb, NULL);
    
    pthread_t tid2;
    // 将cb当参数传递进去，并没有调用它
    // 所以称cb为回调函数
    pthread_create(&tid2, NULL, cb, NULL);
    
    pthread_join(tid, NULL);
    pthread_join(tid2, NULL);
    
    return 0;
}



############################################################
### % 函数指针
############################################################
// % 函数实际上就是一个代码块，这个代码块执行到最后会返回

______________________________________________________
// 函数指针, (只能指向-> 无参数,无返回值的函数 )
void (*p)(void);
// 函数指针, (只能指向-> 2个整形参数,无返回值的函数 )
void (*p1)(int, int);
// 函数指针, (只能指向-> 1个整形参数,1个char类型返回值的函数 )
char (*p2)(int);
// 函数指针, (只能指向-> void *fun(int *)这样的函数 )
void * (*p3)(int *);
______________________________________________________


void fun1(void)
{
    printf("我是fun1\n");
}
void fun2(void)
{
    printf("我是fun2\n");
}

int main(void)
{
    // 函数指针赋值，必须格式相同
    void (*p)(void);
    // 让p这个指针指向fun1的整个函数
    p = fun1;
    
    // % 函数指针运行(原始的运行方法), 实际就是它指向的函数对象的运行
    // % 表示通过“*”(*在C语言中为解引用)拿到所指向的对象，然后让它运行
    (*p)();
    // % 函数指针运行(简写的运行方法), 实际就是它指向的函数对象的运行
    p();
    
    // % 修改p的指向，继续运行
    p = fun2;
    // % 运行p指向的对象
    p();
}



############################################################
### % 回调函数
### % gcc main.c run.c
############################################################
#################
# touch main.c  #
#################
// % 先声明，再使用
extern void (*step)(void);

void mystep_cb(void)
{
    printf("记秒到时\n");
}


int main(void)
{
    step = mystep_cb;
    run();
}



#################
#  touch run.c  #
#################
#include <stdio.h>
#include <unistd.h>

// 希望在run循环里，每隔1秒运行一个函数，这个函数由mian.c来指定 
// 函数放在main.c里面

// 定义一个函数指针，在循环中运行
void (*step)(void) = NULL;


// 无限运行函数，每秒cnt自增1
void run(void)
{
    int cnt = 0;
    while (1)
    {   // 有赋值才运行，否则不运行，避免乱运行
        if (step != NULL)
        step();
        cnt++;
        sleep(1);
    }
}




