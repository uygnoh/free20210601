############################################################
### % vim-YouCompletemeMe
############################################################
0 安装Plgu-in
" plug-in插件配置
call plug#begin('~/.vim/plugged')                     
Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe'
call plug#end()


1 CMAKE
sudo apt-get install libssl-dev
% wget http://www.cmake.org/files/v3.16/cmake-3.16.6.tar.gz
tar xf cmake-3.16.6.tar.gz 
sudo chmod -R 777 cmake-3.16.6
cd cmake-3.16.6/
./bootstrap
make
sudo make install


2 YouCompleteMe
cd ~/.vim/plugged/YouCompleteMe
./install.sh --clangd-completer
./install.sh --clangd-completer


3 VIM
./configure --with-features=huge \
        --enable-multibyte \
        --enable-rubyinterp=yes \
        --enable-python3interp=yes \
        --with-python-config-dir=/usr/bin/python3.7m-config \
        --enable-perlinterp=yes \
        --enable-luainterp=yes \
        --enable-gui=gtk2 \
        --enable-cscope \
        --prefix=/usr/local
请注意：把 python3-config-dir 这个目录换成你自己的，就是你的操作系统自带的 
python3 的 config 目录，/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu 
这个是我的目录，跟你的可能不一样，请自行查找



在使用vim编写c文件的时候， 出现'module' object has no attribute 'FlagsForFile' ， 
修改.ycm_extra_conf.py文件，在最后加上

def Settings( **kwargs ):
  return {
    'flags': [ '-x', 'c++', '-Wall', '-Wextra', '-Werror' ],
  }
  
  

set completeopt=menu,menuone
let g:ycm_server_python_interpreter='/usr/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_complete_in_strings=1
highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
let g:ycm_semantic_triggers =  {
                        \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
                        \ 'cs,lua,javascript': ['re!\w{2}'],
                        \ }
filetype plugin indent on




% sudo apt-get install ctags
############################################################
### 变量使用
############################################################
// 全局变量前缀： global_




// 局部变量
tmp		临时变量
flag		标志
pos		位置
ret		返回值
size		大小
num		数字
len		长度




// UART通信
uart_tx_buf[];
uart_rx_buf[];


// IIC通信
iic_tx_buf[];
iic_rx_buf[];


// SPI通信
spi_tx_buf[];
spi_rx_buf[];


// CAN通信
can_tx_buf[];
can_rx_buf[];



############################################################
### 编程规范
############################################################
________________________________
1 //  缩进
________________________________
Tab的宽度是八个字符，因此缩进的宽度也是八个字符


________________________________
2 // switch-case 对齐
________________________________
switch (suffix) {
case 'a':
case 'g':
case 'm':
default:
	break;
}


________________________________
2 // 换行
________________________________
单行的宽度限制为八十列，这是强烈推荐的设置
不要把多个赋值语句放在同一行，内核的代码风
格是十分简洁的，请尽量避免使用复杂的表达式


________________________________
3 // 括号与空格
________________________________
// 在一个循环中和条件判断中
// 超过一行语句，也需要使用括号
// (if, switch, for, while, do)
if (x is true) {
        we do y
}
// 然而，有一个特殊的例子，就是函数：
// 函数的左括号应该放在行首：
int function(int x)
{
	body of function
}
// 注意到，右括号一般是单独成一行的，
// 除非右括号之后紧随着紧密结合的语句，
// 例如 do-while 语句和 if 语句：
do {
	body of do-loop
} while (condition);


// 所以需要在下面这些关键字之后添加一个空格：
if, switch, case, for, do, while
// 但是不要在下面这些关键字之后添加一个空格：
sizeof, typeof, alignof, attribute
// 不要在括号周围多此一举的添加空格，下面这个例子糟透了： 警告！
s = sizeof( struct file );
// 在声明指针或者返回值为指针的函数时，星号的位置
// 应该紧靠着变量名或函数名，而不是类型名，例如：
char *linux_banner;
unsigned long long memparse(char *ptr, char **retptr);
char *match_strdup(substring_t *s);
// 在二元操作符和三元操作符周围添加一个空格，例如：
=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :
// 但是不要在一元操作符之后添加空格： 警告！
&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined
// 不要在后缀的自增自减一元操作符之前添加空格： 警告！
++  --
// 不要在前缀的自增自减一元操作符之后添加空格： 警告！
++  --
// 不要在结构体成员操作符周围添加空格： 警告！
.  ->
